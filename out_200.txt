SN is 100
Direct calculated velocity is: 14.989575213283006 m/s, sigma gauss: 0.19877526707482712 m/s, sigma: 15.99985694961984 m/s
Filename: /home/lambda/code/synth_spectrum/velocity.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16    294.8 MiB    294.8 MiB           1   @profile
    17                                         def find_velocity(spectrum: list, template: list, inter: list, mult: int):
    18    294.8 MiB      0.0 MiB           1       plot = False
    19    294.8 MiB      0.0 MiB           1       spectrum_ang = spectrum[0]
    20    294.8 MiB      0.0 MiB           1       spectrum_flux = spectrum[1]
    21    294.8 MiB      0.0 MiB           1       template_ang = template[0]
    22    294.8 MiB      0.0 MiB           1       template_flux = template[1]
    23   1244.7 MiB    949.9 MiB           1       spectrum_ang, spectrum_flux = increese_resolution(spectrum, mult)
    24   2201.1 MiB    956.4 MiB           1       template_ang, template_flux = increese_resolution(template, mult)
    25                                         
    26   2201.1 MiB      0.0 MiB           1       aa_start = inter[0]
    27   2201.1 MiB      0.0 MiB           1       aa_end = inter[1]
    28                                         
    29   2247.0 MiB     45.9 MiB           1       obs_crop = np.where((spectrum_ang >= aa_start) & (spectrum_ang <= aa_end))
    30   2292.8 MiB     45.8 MiB           1       template_crop = np.where((template_ang >= aa_start) & (template_ang <= aa_end))
    31                                         
    32   1868.6 MiB   -424.2 MiB           1       spectrum_ang = spectrum_ang[obs_crop]
    33   1444.4 MiB   -424.2 MiB           1       spectrum_flux = spectrum_flux[obs_crop]
    34   1020.2 MiB   -424.2 MiB           1       template_ang = template_ang[template_crop]
    35    596.0 MiB   -424.2 MiB           1       template_flux = template_flux[template_crop]
    36                                         
    37    596.0 MiB      0.0 MiB           1       flux_unit = u.Unit('erg s^-1 cm^-2 AA^-1')
    38    642.8 MiB     46.8 MiB     6000016       unc = [10e-10 for x in range(len(spectrum_flux))]
    39    688.5 MiB     45.7 MiB     6000023       unc_t = [10e-10 for x in range(len(template_flux))]
    40                                         
    41    688.5 MiB      0.0 MiB           1       speed_arr = []  # for speed calculate in multiply approach
    42                                         
    43   1009.0 MiB    228.9 MiB           2       template = Spectrum1D(spectral_axis=template_ang*u.AA, 
    44    780.0 MiB     45.8 MiB           1                             flux=template_flux*flux_unit,
    45    825.9 MiB     45.9 MiB           1                             uncertainty=StdDevUncertainty(unc_t))
    46   1329.5 MiB    228.8 MiB           2       observed = Spectrum1D(spectral_axis=spectrum_ang*u.AA,
    47   1100.6 MiB     45.9 MiB           1                             flux=spectrum_flux*flux_unit,
    48   1146.4 MiB     45.8 MiB           1                             uncertainty=StdDevUncertainty(unc))
    49   2458.6 MiB   1129.1 MiB           2       corr, lag = correlation.template_correlate(observed, template,
    50   1329.5 MiB      0.0 MiB           1                                                  lag_units=u.one, method="fft")
    51   2458.6 MiB      0.0 MiB           1       corr = (corr - np.min(corr)) / (np.max(corr) - np.min(corr))  # normalize correlation
    52                                         
    53                                             # autocorrelation part. needs for error estimation
    54   3072.4 MiB    613.8 MiB           2       corr_template, lag_template = correlation.template_correlate(template,
    55   2458.6 MiB      0.0 MiB           1                                                                    template,
    56   2458.6 MiB      0.0 MiB           1                                                                    lag_units=u.one,
    57   2458.6 MiB      0.0 MiB           1                                                                    method="fft")
    58   3072.4 MiB      0.0 MiB           1       corr_template = (corr_template - np.min(corr_template)) / (np.max(corr_template) - np.min(corr_template)) 
    59   3072.4 MiB      0.0 MiB           1       if plot:
    60                                                 plt.plot(lag*299792458, corr)
    61                                                 plt.xlabel("Correlation speed, m/s")
    62                                                 plt.ylabel("Correlation Signal")
    63                                                 plt.show()
    64                                         
    65   3072.4 MiB      0.0 MiB           1       z_peak = lag[np.where(corr==np.max(corr))][0]
    66   3072.4 MiB      0.0 MiB           1       calculate_velocity = z_peak * 299792458
    67   3072.4 MiB      0.0 MiB           1       speed_arr.append(calculate_velocity)
    68   3072.4 MiB      0.0 MiB           1       n = 15 * 1000 # points to the left or right of correlation maximum
    69   3072.4 MiB      0.0 MiB           1       index_peak = np.where(corr == np.amax(corr))[0][0]
    70   3072.4 MiB      0.0 MiB           1       peak_lags = lag[index_peak-n:index_peak+n+1].value
    71   3072.4 MiB      0.0 MiB           1       peak_vals = corr[index_peak-n:index_peak+n+1].value
    72   3073.0 MiB      0.6 MiB           1       p = np.polyfit(peak_lags, peak_vals, deg=2)
    73   3073.1 MiB      0.1 MiB           1       roots = np.roots(p)
    74   3073.1 MiB      0.0 MiB           1       v_fit = np.mean(roots) # maximum lies at mid point between roots
    75   3073.1 MiB      0.0 MiB           1       z = v_fit * 299792458 
    76                                         
    77   3073.1 MiB      0.0 MiB           1       if plot:
    78                                                 plt.scatter(peak_lags * 299792458, peak_vals, label='data')
    79                                                 plt.plot(peak_lags * 299792458, np.polyval(p, peak_lags),
    80                                                          linewidth=0.5, label='fit')
    81                                                 plt.xlabel(lag.unit)
    82                                                 plt.legend()
    83                                                 plt.title('Fit to correlation peak')
    84                                                 plt.show()
    85                                         
    86                                             # Error count part
    87   3073.3 MiB      0.1 MiB           1       sigma_t = np.std(template_flux)
    88   3073.3 MiB      0.0 MiB           1       sigma_g = np.std(spectrum_flux)
    89   3073.3 MiB      0.0 MiB           1       Rt = np.sqrt(np.mean(template_flux**2))
    90   3073.3 MiB      0.0 MiB           1       Rg = np.sqrt(np.mean(spectrum_flux**2))
    91   3073.3 MiB      0.0 MiB           1       sigma =  (1/len(template_flux)) * (sigma_t**2 / Rt**2 + sigma_g**2 / Rg**2) ** 0.5
    92                                             # A is cross-correlation peak intens
    93                                             # THIS PEACE OF SHIT
    94                                             # Calculate velocity error
    95                                             # Moiseev error counting
    96                                             # Optimization correlation peak with gauss function
    97                                             # For this, need to cut-off some lenght of arrray
    98                                             # TO DO: add cuts for multiply peaks fitting.
    99                                             # cut of template-template correlation:
   100   3073.3 MiB      0.0 MiB           1       wings_t = 50 * 1000  # in meters. 
   101   3073.3 MiB      0.0 MiB           1       autocorr_crop = np.where((lag_template*299792458 >= -wings_t) & (lag_template*299792458 <= wings_t))
   102   2978.9 MiB    -94.4 MiB           1       corr_template = corr_template[autocorr_crop]
   103   2884.4 MiB    -94.4 MiB           1       lag_template = lag_template[autocorr_crop]
   104                                         
   105   2884.4 MiB      0.0 MiB           1       initial_guess = [max(corr_template), 0, 1, 0.90] # Initial guess for template-template correlation
   106   2884.7 MiB      0.2 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   107   2884.4 MiB      0.0 MiB           1                                          lag_template*299792458, corr_template,
   108   2884.4 MiB      0.0 MiB           1                                          p0=initial_guess)
   109                                         
   110   2884.7 MiB      0.0 MiB           1       fit_sigma_t = fit_params[2]
   111   2884.7 MiB      0.0 MiB           1       if plot:
   112                                                 plt.plot(lag_template*299792458, gaussian_function(lag_template*299792458,
   113                                                                                                    *fit_params), 'r-', label='fit')
   114                                                 plt.plot(lag_template*299792458, corr_template)
   115                                                 plt.xlabel("Correlation speed, m/s")
   116                                                 plt.ylabel("Correlation Signal")
   117                                                 plt.show()
   118                                         
   119                                         
   120                                             # cut-off observed-template correlation
   121   2884.7 MiB      0.0 MiB           1       corr_crop = np.where((lag*299792458 >= z-wings_t) & (lag*299792458<= z+wings_t))
   122   2884.7 MiB      0.0 MiB           1       corr = corr[corr_crop]
   123   2884.7 MiB      0.0 MiB           1       lag = lag[corr_crop]
   124                                         
   125   2884.7 MiB      0.0 MiB           1       initial_guess = [max(corr), z, 3000, 0.96]
   126   2884.7 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   127   2884.7 MiB      0.0 MiB           1                                          peak_lags*299792458, peak_vals,
   128   2884.7 MiB      0.0 MiB           1                                          p0=initial_guess)
   129   2884.7 MiB      0.0 MiB           1       fit_sigma = fit_params[2]
   130   2884.7 MiB      0.0 MiB           1       if plot:
   131                                                 plt.plot(lag*299792458, gaussian_function(lag*299792458, *fit_params), 'r-', label='fit')
   132                                                 plt.plot(lag*299792458, corr)
   133                                                 plt.xlabel("Correlation speed, m/s")
   134                                                 plt.ylabel("Correlation Signal")
   135                                                 plt.show()
   136   2884.7 MiB      0.0 MiB           1       z_err = abs(sigma**2 - sigma_t**2)
   137   2884.7 MiB      0.0 MiB           1       z_err = z_err**0.5 
   138                                             
   139   2884.7 MiB      0.0 MiB           1       print(f"Direct calculated velocity is: {calculate_velocity} m/s, sigma gauss: {z_err} m/s, sigma: {sigma*299792458} m/s")
   140                                         
   141   2884.7 MiB      0.0 MiB           1       return calculate_velocity, z, z_err, sigma*299792458


SN is 101
Direct calculated velocity is: 20.9854055648654 m/s, sigma gauss: 0.19877526707482712 m/s, sigma: 16.001107818890734 m/s
Filename: /home/lambda/code/synth_spectrum/velocity.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16   1778.9 MiB   1778.9 MiB           1   @profile
    17                                         def find_velocity(spectrum: list, template: list, inter: list, mult: int):
    18   1778.9 MiB      0.0 MiB           1       plot = False
    19   1778.9 MiB      0.0 MiB           1       spectrum_ang = spectrum[0]
    20   1778.9 MiB      0.0 MiB           1       spectrum_flux = spectrum[1]
    21   1778.9 MiB      0.0 MiB           1       template_ang = template[0]
    22   1778.9 MiB      0.0 MiB           1       template_flux = template[1]
    23   2723.5 MiB    944.5 MiB           1       spectrum_ang, spectrum_flux = increese_resolution(spectrum, mult)
    24   3663.5 MiB    940.0 MiB           1       template_ang, template_flux = increese_resolution(template, mult)
    25                                         
    26   3663.5 MiB      0.0 MiB           1       aa_start = inter[0]
    27   3663.5 MiB      0.0 MiB           1       aa_end = inter[1]
    28                                         
    29   3709.3 MiB     45.8 MiB           1       obs_crop = np.where((spectrum_ang >= aa_start) & (spectrum_ang <= aa_end))
    30   3755.0 MiB     45.8 MiB           1       template_crop = np.where((template_ang >= aa_start) & (template_ang <= aa_end))
    31                                         
    32   3330.8 MiB   -424.2 MiB           1       spectrum_ang = spectrum_ang[obs_crop]
    33   2906.6 MiB   -424.2 MiB           1       spectrum_flux = spectrum_flux[obs_crop]
    34   2482.4 MiB   -424.2 MiB           1       template_ang = template_ang[template_crop]
    35   2058.2 MiB   -424.2 MiB           1       template_flux = template_flux[template_crop]
    36                                         
    37   2058.2 MiB      0.0 MiB           1       flux_unit = u.Unit('erg s^-1 cm^-2 AA^-1')
    38   2104.0 MiB     45.7 MiB     6000016       unc = [10e-10 for x in range(len(spectrum_flux))]
    39   2151.3 MiB     47.3 MiB     6000023       unc_t = [10e-10 for x in range(len(template_flux))]
    40                                         
    41   2151.3 MiB      0.0 MiB           1       speed_arr = []  # for speed calculate in multiply approach
    42                                         
    43   2471.9 MiB    228.9 MiB           2       template = Spectrum1D(spectral_axis=template_ang*u.AA, 
    44   2242.8 MiB     45.8 MiB           1                             flux=template_flux*flux_unit,
    45   2288.8 MiB     46.0 MiB           1                             uncertainty=StdDevUncertainty(unc_t))
    46   2792.3 MiB    228.9 MiB           2       observed = Spectrum1D(spectral_axis=spectrum_ang*u.AA,
    47   2563.4 MiB     45.8 MiB           1                             flux=spectrum_flux*flux_unit,
    48   2609.2 MiB     45.8 MiB           1                             uncertainty=StdDevUncertainty(unc))
    49   3217.4 MiB    425.1 MiB           2       corr, lag = correlation.template_correlate(observed, template,
    50   2792.3 MiB      0.0 MiB           1                                                  lag_units=u.one, method="fft")
    51   3217.4 MiB      0.0 MiB           1       corr = (corr - np.min(corr)) / (np.max(corr) - np.min(corr))  # normalize correlation
    52                                         
    53                                             # autocorrelation part. needs for error estimation
    54   3547.9 MiB    330.5 MiB           2       corr_template, lag_template = correlation.template_correlate(template,
    55   3217.4 MiB      0.0 MiB           1                                                                    template,
    56   3217.4 MiB      0.0 MiB           1                                                                    lag_units=u.one,
    57   3217.4 MiB      0.0 MiB           1                                                                    method="fft")
    58   3547.9 MiB      0.0 MiB           1       corr_template = (corr_template - np.min(corr_template)) / (np.max(corr_template) - np.min(corr_template)) 
    59   3547.9 MiB      0.0 MiB           1       if plot:
    60                                                 plt.plot(lag*299792458, corr)
    61                                                 plt.xlabel("Correlation speed, m/s")
    62                                                 plt.ylabel("Correlation Signal")
    63                                                 plt.show()
    64                                         
    65   3547.9 MiB      0.0 MiB           1       z_peak = lag[np.where(corr==np.max(corr))][0]
    66   3547.9 MiB      0.0 MiB           1       calculate_velocity = z_peak * 299792458
    67   3547.9 MiB      0.0 MiB           1       speed_arr.append(calculate_velocity)
    68   3547.9 MiB      0.0 MiB           1       n = 15 * 1000 # points to the left or right of correlation maximum
    69   3547.9 MiB      0.0 MiB           1       index_peak = np.where(corr == np.amax(corr))[0][0]
    70   3547.9 MiB      0.0 MiB           1       peak_lags = lag[index_peak-n:index_peak+n+1].value
    71   3547.9 MiB      0.0 MiB           1       peak_vals = corr[index_peak-n:index_peak+n+1].value
    72   3547.9 MiB      0.0 MiB           1       p = np.polyfit(peak_lags, peak_vals, deg=2)
    73   3547.9 MiB      0.0 MiB           1       roots = np.roots(p)
    74   3547.9 MiB      0.0 MiB           1       v_fit = np.mean(roots) # maximum lies at mid point between roots
    75   3547.9 MiB      0.0 MiB           1       z = v_fit * 299792458 
    76                                         
    77   3547.9 MiB      0.0 MiB           1       if plot:
    78                                                 plt.scatter(peak_lags * 299792458, peak_vals, label='data')
    79                                                 plt.plot(peak_lags * 299792458, np.polyval(p, peak_lags),
    80                                                          linewidth=0.5, label='fit')
    81                                                 plt.xlabel(lag.unit)
    82                                                 plt.legend()
    83                                                 plt.title('Fit to correlation peak')
    84                                                 plt.show()
    85                                         
    86                                             # Error count part
    87   3547.9 MiB      0.0 MiB           1       sigma_t = np.std(template_flux)
    88   3547.9 MiB      0.0 MiB           1       sigma_g = np.std(spectrum_flux)
    89   3547.9 MiB      0.0 MiB           1       Rt = np.sqrt(np.mean(template_flux**2))
    90   3547.9 MiB      0.0 MiB           1       Rg = np.sqrt(np.mean(spectrum_flux**2))
    91   3547.9 MiB      0.0 MiB           1       sigma =  (1/len(template_flux)) * (sigma_t**2 / Rt**2 + sigma_g**2 / Rg**2) ** 0.5
    92                                             # A is cross-correlation peak intens
    93                                             # THIS PEACE OF SHIT
    94                                             # Calculate velocity error
    95                                             # Moiseev error counting
    96                                             # Optimization correlation peak with gauss function
    97                                             # For this, need to cut-off some lenght of arrray
    98                                             # TO DO: add cuts for multiply peaks fitting.
    99                                             # cut of template-template correlation:
   100   3547.9 MiB      0.0 MiB           1       wings_t = 50 * 1000  # in meters. 
   101   3547.9 MiB      0.0 MiB           1       autocorr_crop = np.where((lag_template*299792458 >= -wings_t) & (lag_template*299792458 <= wings_t))
   102   3453.5 MiB    -94.4 MiB           1       corr_template = corr_template[autocorr_crop]
   103   3359.1 MiB    -94.4 MiB           1       lag_template = lag_template[autocorr_crop]
   104                                         
   105   3359.1 MiB      0.0 MiB           1       initial_guess = [max(corr_template), 0, 1, 0.90] # Initial guess for template-template correlation
   106   3359.1 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   107   3359.1 MiB      0.0 MiB           1                                          lag_template*299792458, corr_template,
   108   3359.1 MiB      0.0 MiB           1                                          p0=initial_guess)
   109                                         
   110   3359.1 MiB      0.0 MiB           1       fit_sigma_t = fit_params[2]
   111   3359.1 MiB      0.0 MiB           1       if plot:
   112                                                 plt.plot(lag_template*299792458, gaussian_function(lag_template*299792458,
   113                                                                                                    *fit_params), 'r-', label='fit')
   114                                                 plt.plot(lag_template*299792458, corr_template)
   115                                                 plt.xlabel("Correlation speed, m/s")
   116                                                 plt.ylabel("Correlation Signal")
   117                                                 plt.show()
   118                                         
   119                                         
   120                                             # cut-off observed-template correlation
   121   3359.1 MiB      0.0 MiB           1       corr_crop = np.where((lag*299792458 >= z-wings_t) & (lag*299792458<= z+wings_t))
   122   3359.1 MiB      0.0 MiB           1       corr = corr[corr_crop]
   123   3359.1 MiB      0.0 MiB           1       lag = lag[corr_crop]
   124                                         
   125   3359.1 MiB      0.0 MiB           1       initial_guess = [max(corr), z, 3000, 0.96]
   126   3359.1 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   127   3359.1 MiB      0.0 MiB           1                                          peak_lags*299792458, peak_vals,
   128   3359.1 MiB      0.0 MiB           1                                          p0=initial_guess)
   129   3359.1 MiB      0.0 MiB           1       fit_sigma = fit_params[2]
   130   3359.1 MiB      0.0 MiB           1       if plot:
   131                                                 plt.plot(lag*299792458, gaussian_function(lag*299792458, *fit_params), 'r-', label='fit')
   132                                                 plt.plot(lag*299792458, corr)
   133                                                 plt.xlabel("Correlation speed, m/s")
   134                                                 plt.ylabel("Correlation Signal")
   135                                                 plt.show()
   136   3359.1 MiB      0.0 MiB           1       z_err = abs(sigma**2 - sigma_t**2)
   137   3359.1 MiB      0.0 MiB           1       z_err = z_err**0.5 
   138                                             
   139   3359.1 MiB      0.0 MiB           1       print(f"Direct calculated velocity is: {calculate_velocity} m/s, sigma gauss: {z_err} m/s, sigma: {sigma*299792458} m/s")
   140                                         
   141   3359.1 MiB      0.0 MiB           1       return calculate_velocity, z, z_err, sigma*299792458


SN is 102
Direct calculated velocity is: 20.9854055648654 m/s, sigma gauss: 0.19877526707482712 m/s, sigma: 16.001145229676577 m/s
Filename: /home/lambda/code/synth_spectrum/velocity.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16   2253.2 MiB   2253.2 MiB           1   @profile
    17                                         def find_velocity(spectrum: list, template: list, inter: list, mult: int):
    18   2253.2 MiB      0.0 MiB           1       plot = False
    19   2253.2 MiB      0.0 MiB           1       spectrum_ang = spectrum[0]
    20   2253.2 MiB      0.0 MiB           1       spectrum_flux = spectrum[1]
    21   2253.2 MiB      0.0 MiB           1       template_ang = template[0]
    22   2253.2 MiB      0.0 MiB           1       template_flux = template[1]
    23   3193.1 MiB    939.9 MiB           1       spectrum_ang, spectrum_flux = increese_resolution(spectrum, mult)
    24   4133.1 MiB    939.9 MiB           1       template_ang, template_flux = increese_resolution(template, mult)
    25                                         
    26   4133.1 MiB      0.0 MiB           1       aa_start = inter[0]
    27   4133.1 MiB      0.0 MiB           1       aa_end = inter[1]
    28                                         
    29   4178.9 MiB     45.8 MiB           1       obs_crop = np.where((spectrum_ang >= aa_start) & (spectrum_ang <= aa_end))
    30   4224.6 MiB     45.8 MiB           1       template_crop = np.where((template_ang >= aa_start) & (template_ang <= aa_end))
    31                                         
    32   3800.5 MiB   -424.2 MiB           1       spectrum_ang = spectrum_ang[obs_crop]
    33   3376.3 MiB   -424.2 MiB           1       spectrum_flux = spectrum_flux[obs_crop]
    34   2952.1 MiB   -424.2 MiB           1       template_ang = template_ang[template_crop]
    35   2527.9 MiB   -424.2 MiB           1       template_flux = template_flux[template_crop]
    36                                         
    37   2527.9 MiB      0.0 MiB           1       flux_unit = u.Unit('erg s^-1 cm^-2 AA^-1')
    38   2596.4 MiB     68.5 MiB     6000016       unc = [10e-10 for x in range(len(spectrum_flux))]
    39   2643.2 MiB     46.8 MiB     6000023       unc_t = [10e-10 for x in range(len(template_flux))]
    40                                         
    41   2643.2 MiB      0.0 MiB           1       speed_arr = []  # for speed calculate in multiply approach
    42                                         
    43   2963.6 MiB    228.9 MiB           2       template = Spectrum1D(spectral_axis=template_ang*u.AA, 
    44   2734.6 MiB     45.7 MiB           1                             flux=template_flux*flux_unit,
    45   2780.5 MiB     45.9 MiB           1                             uncertainty=StdDevUncertainty(unc_t))
    46   3284.1 MiB    228.9 MiB           2       observed = Spectrum1D(spectral_axis=spectrum_ang*u.AA,
    47   3055.1 MiB     45.7 MiB           1                             flux=spectrum_flux*flux_unit,
    48   3100.9 MiB     45.8 MiB           1                             uncertainty=StdDevUncertainty(unc))
    49   3351.6 MiB     67.5 MiB           2       corr, lag = correlation.template_correlate(observed, template,
    50   3284.1 MiB      0.0 MiB           1                                                  lag_units=u.one, method="fft")
    51   3351.6 MiB      0.0 MiB           1       corr = (corr - np.min(corr)) / (np.max(corr) - np.min(corr))  # normalize correlation
    52                                         
    53                                             # autocorrelation part. needs for error estimation
    54   4295.8 MiB    944.2 MiB           2       corr_template, lag_template = correlation.template_correlate(template,
    55   3351.6 MiB      0.0 MiB           1                                                                    template,
    56   3351.6 MiB      0.0 MiB           1                                                                    lag_units=u.one,
    57   3351.6 MiB      0.0 MiB           1                                                                    method="fft")
    58   4295.8 MiB      0.0 MiB           1       corr_template = (corr_template - np.min(corr_template)) / (np.max(corr_template) - np.min(corr_template)) 
    59   4295.8 MiB      0.0 MiB           1       if plot:
    60                                                 plt.plot(lag*299792458, corr)
    61                                                 plt.xlabel("Correlation speed, m/s")
    62                                                 plt.ylabel("Correlation Signal")
    63                                                 plt.show()
    64                                         
    65   4295.8 MiB      0.0 MiB           1       z_peak = lag[np.where(corr==np.max(corr))][0]
    66   4295.8 MiB      0.0 MiB           1       calculate_velocity = z_peak * 299792458
    67   4295.8 MiB      0.0 MiB           1       speed_arr.append(calculate_velocity)
    68   4295.8 MiB      0.0 MiB           1       n = 15 * 1000 # points to the left or right of correlation maximum
    69   4295.8 MiB      0.0 MiB           1       index_peak = np.where(corr == np.amax(corr))[0][0]
    70   4295.8 MiB      0.0 MiB           1       peak_lags = lag[index_peak-n:index_peak+n+1].value
    71   4295.8 MiB      0.0 MiB           1       peak_vals = corr[index_peak-n:index_peak+n+1].value
    72   4295.8 MiB      0.0 MiB           1       p = np.polyfit(peak_lags, peak_vals, deg=2)
    73   4295.8 MiB      0.0 MiB           1       roots = np.roots(p)
    74   4295.8 MiB      0.0 MiB           1       v_fit = np.mean(roots) # maximum lies at mid point between roots
    75   4295.8 MiB      0.0 MiB           1       z = v_fit * 299792458 
    76                                         
    77   4295.8 MiB      0.0 MiB           1       if plot:
    78                                                 plt.scatter(peak_lags * 299792458, peak_vals, label='data')
    79                                                 plt.plot(peak_lags * 299792458, np.polyval(p, peak_lags),
    80                                                          linewidth=0.5, label='fit')
    81                                                 plt.xlabel(lag.unit)
    82                                                 plt.legend()
    83                                                 plt.title('Fit to correlation peak')
    84                                                 plt.show()
    85                                         
    86                                             # Error count part
    87   4295.8 MiB      0.0 MiB           1       sigma_t = np.std(template_flux)
    88   4295.8 MiB      0.0 MiB           1       sigma_g = np.std(spectrum_flux)
    89   4295.8 MiB      0.0 MiB           1       Rt = np.sqrt(np.mean(template_flux**2))
    90   4295.8 MiB      0.0 MiB           1       Rg = np.sqrt(np.mean(spectrum_flux**2))
    91   4295.8 MiB      0.0 MiB           1       sigma =  (1/len(template_flux)) * (sigma_t**2 / Rt**2 + sigma_g**2 / Rg**2) ** 0.5
    92                                             # A is cross-correlation peak intens
    93                                             # THIS PEACE OF SHIT
    94                                             # Calculate velocity error
    95                                             # Moiseev error counting
    96                                             # Optimization correlation peak with gauss function
    97                                             # For this, need to cut-off some lenght of arrray
    98                                             # TO DO: add cuts for multiply peaks fitting.
    99                                             # cut of template-template correlation:
   100   4295.8 MiB      0.0 MiB           1       wings_t = 50 * 1000  # in meters. 
   101   4301.7 MiB      5.9 MiB           1       autocorr_crop = np.where((lag_template*299792458 >= -wings_t) & (lag_template*299792458 <= wings_t))
   102   4207.3 MiB    -94.4 MiB           1       corr_template = corr_template[autocorr_crop]
   103   4112.8 MiB    -94.4 MiB           1       lag_template = lag_template[autocorr_crop]
   104                                         
   105   4112.8 MiB      0.0 MiB           1       initial_guess = [max(corr_template), 0, 1, 0.90] # Initial guess for template-template correlation
   106   4112.8 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   107   4112.8 MiB      0.0 MiB           1                                          lag_template*299792458, corr_template,
   108   4112.8 MiB      0.0 MiB           1                                          p0=initial_guess)
   109                                         
   110   4112.8 MiB      0.0 MiB           1       fit_sigma_t = fit_params[2]
   111   4112.8 MiB      0.0 MiB           1       if plot:
   112                                                 plt.plot(lag_template*299792458, gaussian_function(lag_template*299792458,
   113                                                                                                    *fit_params), 'r-', label='fit')
   114                                                 plt.plot(lag_template*299792458, corr_template)
   115                                                 plt.xlabel("Correlation speed, m/s")
   116                                                 plt.ylabel("Correlation Signal")
   117                                                 plt.show()
   118                                         
   119                                         
   120                                             # cut-off observed-template correlation
   121   4112.8 MiB      0.0 MiB           1       corr_crop = np.where((lag*299792458 >= z-wings_t) & (lag*299792458<= z+wings_t))
   122   4112.8 MiB      0.0 MiB           1       corr = corr[corr_crop]
   123   4112.8 MiB      0.0 MiB           1       lag = lag[corr_crop]
   124                                         
   125   4112.8 MiB      0.0 MiB           1       initial_guess = [max(corr), z, 3000, 0.96]
   126   4112.8 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   127   4112.8 MiB      0.0 MiB           1                                          peak_lags*299792458, peak_vals,
   128   4112.8 MiB      0.0 MiB           1                                          p0=initial_guess)
   129   4112.8 MiB      0.0 MiB           1       fit_sigma = fit_params[2]
   130   4112.8 MiB      0.0 MiB           1       if plot:
   131                                                 plt.plot(lag*299792458, gaussian_function(lag*299792458, *fit_params), 'r-', label='fit')
   132                                                 plt.plot(lag*299792458, corr)
   133                                                 plt.xlabel("Correlation speed, m/s")
   134                                                 plt.ylabel("Correlation Signal")
   135                                                 plt.show()
   136   4112.8 MiB      0.0 MiB           1       z_err = abs(sigma**2 - sigma_t**2)
   137   4112.8 MiB      0.0 MiB           1       z_err = z_err**0.5 
   138                                             
   139   4112.8 MiB      0.0 MiB           1       print(f"Direct calculated velocity is: {calculate_velocity} m/s, sigma gauss: {z_err} m/s, sigma: {sigma*299792458} m/s")
   140                                         
   141   4112.8 MiB      0.0 MiB           1       return calculate_velocity, z, z_err, sigma*299792458


SN is 103
Direct calculated velocity is: 20.9854055648654 m/s, sigma gauss: 0.19877526707482712 m/s, sigma: 16.00165985103555 m/s
Filename: /home/lambda/code/synth_spectrum/velocity.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16   3007.6 MiB   3007.6 MiB           1   @profile
    17                                         def find_velocity(spectrum: list, template: list, inter: list, mult: int):
    18   3007.6 MiB      0.0 MiB           1       plot = False
    19   3007.6 MiB      0.0 MiB           1       spectrum_ang = spectrum[0]
    20   3007.6 MiB      0.0 MiB           1       spectrum_flux = spectrum[1]
    21   3007.6 MiB      0.0 MiB           1       template_ang = template[0]
    22   3007.6 MiB      0.0 MiB           1       template_flux = template[1]
    23   3947.6 MiB    939.9 MiB           1       spectrum_ang, spectrum_flux = increese_resolution(spectrum, mult)
    24   4887.5 MiB    939.9 MiB           1       template_ang, template_flux = increese_resolution(template, mult)
    25                                         
    26   4887.5 MiB      0.0 MiB           1       aa_start = inter[0]
    27   4887.5 MiB      0.0 MiB           1       aa_end = inter[1]
    28                                         
    29   4933.2 MiB     45.7 MiB           1       obs_crop = np.where((spectrum_ang >= aa_start) & (spectrum_ang <= aa_end))
    30   4979.0 MiB     45.8 MiB           1       template_crop = np.where((template_ang >= aa_start) & (template_ang <= aa_end))
    31                                         
    32   4554.8 MiB   -424.2 MiB           1       spectrum_ang = spectrum_ang[obs_crop]
    33   4130.6 MiB   -424.2 MiB           1       spectrum_flux = spectrum_flux[obs_crop]
    34   3706.4 MiB   -424.2 MiB           1       template_ang = template_ang[template_crop]
    35   3282.2 MiB   -424.2 MiB           1       template_flux = template_flux[template_crop]
    36                                         
    37   3282.2 MiB      0.0 MiB           1       flux_unit = u.Unit('erg s^-1 cm^-2 AA^-1')
    38   3327.6 MiB     45.4 MiB     6000016       unc = [10e-10 for x in range(len(spectrum_flux))]
    39   3374.3 MiB     46.7 MiB     6000023       unc_t = [10e-10 for x in range(len(template_flux))]
    40                                         
    41   3374.3 MiB      0.0 MiB           1       speed_arr = []  # for speed calculate in multiply approach
    42                                         
    43   3694.8 MiB    228.8 MiB           2       template = Spectrum1D(spectral_axis=template_ang*u.AA, 
    44   3465.8 MiB     45.9 MiB           1                             flux=template_flux*flux_unit,
    45   3511.7 MiB     45.8 MiB           1                             uncertainty=StdDevUncertainty(unc_t))
    46   4015.2 MiB    228.8 MiB           2       observed = Spectrum1D(spectral_axis=spectrum_ang*u.AA,
    47   3786.2 MiB     45.8 MiB           1                             flux=spectrum_flux*flux_unit,
    48   3832.1 MiB     45.8 MiB           1                             uncertainty=StdDevUncertainty(unc))
    49   4716.6 MiB    701.4 MiB           2       corr, lag = correlation.template_correlate(observed, template,
    50   4015.2 MiB      0.0 MiB           1                                                  lag_units=u.one, method="fft")
    51   4716.6 MiB      0.0 MiB           1       corr = (corr - np.min(corr)) / (np.max(corr) - np.min(corr))  # normalize correlation
    52                                         
    53                                             # autocorrelation part. needs for error estimation
    54   5047.1 MiB    330.5 MiB           2       corr_template, lag_template = correlation.template_correlate(template,
    55   4716.6 MiB      0.0 MiB           1                                                                    template,
    56   4716.6 MiB      0.0 MiB           1                                                                    lag_units=u.one,
    57   4716.6 MiB      0.0 MiB           1                                                                    method="fft")
    58   5047.1 MiB      0.0 MiB           1       corr_template = (corr_template - np.min(corr_template)) / (np.max(corr_template) - np.min(corr_template)) 
    59   5047.1 MiB      0.0 MiB           1       if plot:
    60                                                 plt.plot(lag*299792458, corr)
    61                                                 plt.xlabel("Correlation speed, m/s")
    62                                                 plt.ylabel("Correlation Signal")
    63                                                 plt.show()
    64                                         
    65   5047.1 MiB      0.0 MiB           1       z_peak = lag[np.where(corr==np.max(corr))][0]
    66   5047.1 MiB      0.0 MiB           1       calculate_velocity = z_peak * 299792458
    67   5047.1 MiB      0.0 MiB           1       speed_arr.append(calculate_velocity)
    68   5047.1 MiB      0.0 MiB           1       n = 15 * 1000 # points to the left or right of correlation maximum
    69   5047.1 MiB      0.0 MiB           1       index_peak = np.where(corr == np.amax(corr))[0][0]
    70   5047.1 MiB      0.0 MiB           1       peak_lags = lag[index_peak-n:index_peak+n+1].value
    71   5047.1 MiB      0.0 MiB           1       peak_vals = corr[index_peak-n:index_peak+n+1].value
    72   5047.1 MiB      0.0 MiB           1       p = np.polyfit(peak_lags, peak_vals, deg=2)
    73   5047.1 MiB      0.0 MiB           1       roots = np.roots(p)
    74   5047.1 MiB      0.0 MiB           1       v_fit = np.mean(roots) # maximum lies at mid point between roots
    75   5047.1 MiB      0.0 MiB           1       z = v_fit * 299792458 
    76                                         
    77   5047.1 MiB      0.0 MiB           1       if plot:
    78                                                 plt.scatter(peak_lags * 299792458, peak_vals, label='data')
    79                                                 plt.plot(peak_lags * 299792458, np.polyval(p, peak_lags),
    80                                                          linewidth=0.5, label='fit')
    81                                                 plt.xlabel(lag.unit)
    82                                                 plt.legend()
    83                                                 plt.title('Fit to correlation peak')
    84                                                 plt.show()
    85                                         
    86                                             # Error count part
    87   5047.1 MiB      0.0 MiB           1       sigma_t = np.std(template_flux)
    88   5047.1 MiB      0.0 MiB           1       sigma_g = np.std(spectrum_flux)
    89   5047.1 MiB      0.0 MiB           1       Rt = np.sqrt(np.mean(template_flux**2))
    90   5047.1 MiB      0.0 MiB           1       Rg = np.sqrt(np.mean(spectrum_flux**2))
    91   5047.1 MiB      0.0 MiB           1       sigma =  (1/len(template_flux)) * (sigma_t**2 / Rt**2 + sigma_g**2 / Rg**2) ** 0.5
    92                                             # A is cross-correlation peak intens
    93                                             # THIS PEACE OF SHIT
    94                                             # Calculate velocity error
    95                                             # Moiseev error counting
    96                                             # Optimization correlation peak with gauss function
    97                                             # For this, need to cut-off some lenght of arrray
    98                                             # TO DO: add cuts for multiply peaks fitting.
    99                                             # cut of template-template correlation:
   100   5047.1 MiB      0.0 MiB           1       wings_t = 50 * 1000  # in meters. 
   101   5047.1 MiB      0.0 MiB           1       autocorr_crop = np.where((lag_template*299792458 >= -wings_t) & (lag_template*299792458 <= wings_t))
   102   4952.7 MiB    -94.4 MiB           1       corr_template = corr_template[autocorr_crop]
   103   4858.3 MiB    -94.4 MiB           1       lag_template = lag_template[autocorr_crop]
   104                                         
   105   4858.3 MiB      0.0 MiB           1       initial_guess = [max(corr_template), 0, 1, 0.90] # Initial guess for template-template correlation
   106   4858.3 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   107   4858.3 MiB      0.0 MiB           1                                          lag_template*299792458, corr_template,
   108   4858.3 MiB      0.0 MiB           1                                          p0=initial_guess)
   109                                         
   110   4858.3 MiB      0.0 MiB           1       fit_sigma_t = fit_params[2]
   111   4858.3 MiB      0.0 MiB           1       if plot:
   112                                                 plt.plot(lag_template*299792458, gaussian_function(lag_template*299792458,
   113                                                                                                    *fit_params), 'r-', label='fit')
   114                                                 plt.plot(lag_template*299792458, corr_template)
   115                                                 plt.xlabel("Correlation speed, m/s")
   116                                                 plt.ylabel("Correlation Signal")
   117                                                 plt.show()
   118                                         
   119                                         
   120                                             # cut-off observed-template correlation
   121   4858.3 MiB      0.0 MiB           1       corr_crop = np.where((lag*299792458 >= z-wings_t) & (lag*299792458<= z+wings_t))
   122   4858.3 MiB      0.0 MiB           1       corr = corr[corr_crop]
   123   4858.3 MiB      0.0 MiB           1       lag = lag[corr_crop]
   124                                         
   125   4858.3 MiB      0.0 MiB           1       initial_guess = [max(corr), z, 3000, 0.96]
   126   4858.3 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   127   4858.3 MiB      0.0 MiB           1                                          peak_lags*299792458, peak_vals,
   128   4858.3 MiB      0.0 MiB           1                                          p0=initial_guess)
   129   4858.3 MiB      0.0 MiB           1       fit_sigma = fit_params[2]
   130   4858.3 MiB      0.0 MiB           1       if plot:
   131                                                 plt.plot(lag*299792458, gaussian_function(lag*299792458, *fit_params), 'r-', label='fit')
   132                                                 plt.plot(lag*299792458, corr)
   133                                                 plt.xlabel("Correlation speed, m/s")
   134                                                 plt.ylabel("Correlation Signal")
   135                                                 plt.show()
   136   4858.3 MiB      0.0 MiB           1       z_err = abs(sigma**2 - sigma_t**2)
   137   4858.3 MiB      0.0 MiB           1       z_err = z_err**0.5 
   138                                             
   139   4858.3 MiB      0.0 MiB           1       print(f"Direct calculated velocity is: {calculate_velocity} m/s, sigma gauss: {z_err} m/s, sigma: {sigma*299792458} m/s")
   140                                         
   141   4858.3 MiB      0.0 MiB           1       return calculate_velocity, z, z_err, sigma*299792458


SN is 104
Direct calculated velocity is: 17.987490389074203 m/s, sigma gauss: 0.19877526707482712 m/s, sigma: 15.994700288804655 m/s
Filename: /home/lambda/code/synth_spectrum/velocity.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16   3753.0 MiB   3753.0 MiB           1   @profile
    17                                         def find_velocity(spectrum: list, template: list, inter: list, mult: int):
    18   3753.0 MiB      0.0 MiB           1       plot = False
    19   3753.0 MiB      0.0 MiB           1       spectrum_ang = spectrum[0]
    20   3753.0 MiB      0.0 MiB           1       spectrum_flux = spectrum[1]
    21   3753.0 MiB      0.0 MiB           1       template_ang = template[0]
    22   3753.0 MiB      0.0 MiB           1       template_flux = template[1]
    23   4697.6 MiB    944.5 MiB           1       spectrum_ang, spectrum_flux = increese_resolution(spectrum, mult)
    24   5637.5 MiB    939.9 MiB           1       template_ang, template_flux = increese_resolution(template, mult)
    25                                         
    26   5637.5 MiB      0.0 MiB           1       aa_start = inter[0]
    27   5637.5 MiB      0.0 MiB           1       aa_end = inter[1]
    28                                         
    29   5683.3 MiB     45.8 MiB           1       obs_crop = np.where((spectrum_ang >= aa_start) & (spectrum_ang <= aa_end))
    30   5729.1 MiB     45.8 MiB           1       template_crop = np.where((template_ang >= aa_start) & (template_ang <= aa_end))
    31                                         
    32   5304.9 MiB   -424.2 MiB           1       spectrum_ang = spectrum_ang[obs_crop]
    33   4880.7 MiB   -424.2 MiB           1       spectrum_flux = spectrum_flux[obs_crop]
    34   4456.6 MiB   -424.2 MiB           1       template_ang = template_ang[template_crop]
    35   4032.4 MiB   -424.2 MiB           1       template_flux = template_flux[template_crop]
    36                                         
    37   4032.4 MiB      0.0 MiB           1       flux_unit = u.Unit('erg s^-1 cm^-2 AA^-1')
    38   4077.8 MiB     45.3 MiB     6000016       unc = [10e-10 for x in range(len(spectrum_flux))]
    39   4124.9 MiB     47.1 MiB     6000023       unc_t = [10e-10 for x in range(len(template_flux))]
    40                                         
    41   4124.9 MiB      0.0 MiB           1       speed_arr = []  # for speed calculate in multiply approach
    42                                         
    43   4445.3 MiB    228.8 MiB           2       template = Spectrum1D(spectral_axis=template_ang*u.AA, 
    44   4216.4 MiB     45.9 MiB           1                             flux=template_flux*flux_unit,
    45   4262.2 MiB     45.8 MiB           1                             uncertainty=StdDevUncertainty(unc_t))
    46   4765.8 MiB    228.8 MiB           2       observed = Spectrum1D(spectral_axis=spectrum_ang*u.AA,
    47   4536.9 MiB     45.8 MiB           1                             flux=spectrum_flux*flux_unit,
    48   4582.7 MiB     45.8 MiB           1                             uncertainty=StdDevUncertainty(unc))
    49   4765.8 MiB  -2304.0 MiB           2       corr, lag = correlation.template_correlate(observed, template,
    50   4765.8 MiB      0.0 MiB           1                                                  lag_units=u.one, method="fft")
    51   2461.8 MiB  -2304.0 MiB           1       corr = (corr - np.min(corr)) / (np.max(corr) - np.min(corr))  # normalize correlation
    52                                         
    53                                             # autocorrelation part. needs for error estimation
    54   2745.1 MiB    283.4 MiB           2       corr_template, lag_template = correlation.template_correlate(template,
    55   2461.8 MiB      0.0 MiB           1                                                                    template,
    56   2461.8 MiB      0.0 MiB           1                                                                    lag_units=u.one,
    57   2461.8 MiB      0.0 MiB           1                                                                    method="fft")
    58   2745.1 MiB      0.0 MiB           1       corr_template = (corr_template - np.min(corr_template)) / (np.max(corr_template) - np.min(corr_template)) 
    59   2745.1 MiB      0.0 MiB           1       if plot:
    60                                                 plt.plot(lag*299792458, corr)
    61                                                 plt.xlabel("Correlation speed, m/s")
    62                                                 plt.ylabel("Correlation Signal")
    63                                                 plt.show()
    64                                         
    65   2745.1 MiB      0.0 MiB           1       z_peak = lag[np.where(corr==np.max(corr))][0]
    66   2745.1 MiB      0.0 MiB           1       calculate_velocity = z_peak * 299792458
    67   2745.1 MiB      0.0 MiB           1       speed_arr.append(calculate_velocity)
    68   2745.1 MiB      0.0 MiB           1       n = 15 * 1000 # points to the left or right of correlation maximum
    69   2745.1 MiB      0.0 MiB           1       index_peak = np.where(corr == np.amax(corr))[0][0]
    70   2745.1 MiB      0.0 MiB           1       peak_lags = lag[index_peak-n:index_peak+n+1].value
    71   2745.1 MiB      0.0 MiB           1       peak_vals = corr[index_peak-n:index_peak+n+1].value
    72   2745.1 MiB      0.0 MiB           1       p = np.polyfit(peak_lags, peak_vals, deg=2)
    73   2745.1 MiB      0.0 MiB           1       roots = np.roots(p)
    74   2745.1 MiB      0.0 MiB           1       v_fit = np.mean(roots) # maximum lies at mid point between roots
    75   2745.1 MiB      0.0 MiB           1       z = v_fit * 299792458 
    76                                         
    77   2745.1 MiB      0.0 MiB           1       if plot:
    78                                                 plt.scatter(peak_lags * 299792458, peak_vals, label='data')
    79                                                 plt.plot(peak_lags * 299792458, np.polyval(p, peak_lags),
    80                                                          linewidth=0.5, label='fit')
    81                                                 plt.xlabel(lag.unit)
    82                                                 plt.legend()
    83                                                 plt.title('Fit to correlation peak')
    84                                                 plt.show()
    85                                         
    86                                             # Error count part
    87   2745.1 MiB      0.0 MiB           1       sigma_t = np.std(template_flux)
    88   2745.1 MiB      0.0 MiB           1       sigma_g = np.std(spectrum_flux)
    89   2745.1 MiB      0.0 MiB           1       Rt = np.sqrt(np.mean(template_flux**2))
    90   2745.1 MiB      0.0 MiB           1       Rg = np.sqrt(np.mean(spectrum_flux**2))
    91   2745.1 MiB      0.0 MiB           1       sigma =  (1/len(template_flux)) * (sigma_t**2 / Rt**2 + sigma_g**2 / Rg**2) ** 0.5
    92                                             # A is cross-correlation peak intens
    93                                             # THIS PEACE OF SHIT
    94                                             # Calculate velocity error
    95                                             # Moiseev error counting
    96                                             # Optimization correlation peak with gauss function
    97                                             # For this, need to cut-off some lenght of arrray
    98                                             # TO DO: add cuts for multiply peaks fitting.
    99                                             # cut of template-template correlation:
   100   2745.1 MiB      0.0 MiB           1       wings_t = 50 * 1000  # in meters. 
   101   2745.1 MiB      0.0 MiB           1       autocorr_crop = np.where((lag_template*299792458 >= -wings_t) & (lag_template*299792458 <= wings_t))
   102   2650.7 MiB    -94.4 MiB           1       corr_template = corr_template[autocorr_crop]
   103   2556.3 MiB    -94.4 MiB           1       lag_template = lag_template[autocorr_crop]
   104                                         
   105   2556.3 MiB      0.0 MiB           1       initial_guess = [max(corr_template), 0, 1, 0.90] # Initial guess for template-template correlation
   106   2556.3 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   107   2556.3 MiB      0.0 MiB           1                                          lag_template*299792458, corr_template,
   108   2556.3 MiB      0.0 MiB           1                                          p0=initial_guess)
   109                                         
   110   2556.3 MiB      0.0 MiB           1       fit_sigma_t = fit_params[2]
   111   2556.3 MiB      0.0 MiB           1       if plot:
   112                                                 plt.plot(lag_template*299792458, gaussian_function(lag_template*299792458,
   113                                                                                                    *fit_params), 'r-', label='fit')
   114                                                 plt.plot(lag_template*299792458, corr_template)
   115                                                 plt.xlabel("Correlation speed, m/s")
   116                                                 plt.ylabel("Correlation Signal")
   117                                                 plt.show()
   118                                         
   119                                         
   120                                             # cut-off observed-template correlation
   121   2556.3 MiB      0.0 MiB           1       corr_crop = np.where((lag*299792458 >= z-wings_t) & (lag*299792458<= z+wings_t))
   122   2556.3 MiB      0.0 MiB           1       corr = corr[corr_crop]
   123   2556.3 MiB      0.0 MiB           1       lag = lag[corr_crop]
   124                                         
   125   2556.3 MiB      0.0 MiB           1       initial_guess = [max(corr), z, 3000, 0.96]
   126   2556.3 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   127   2556.3 MiB      0.0 MiB           1                                          peak_lags*299792458, peak_vals,
   128   2556.3 MiB      0.0 MiB           1                                          p0=initial_guess)
   129   2556.3 MiB      0.0 MiB           1       fit_sigma = fit_params[2]
   130   2556.3 MiB      0.0 MiB           1       if plot:
   131                                                 plt.plot(lag*299792458, gaussian_function(lag*299792458, *fit_params), 'r-', label='fit')
   132                                                 plt.plot(lag*299792458, corr)
   133                                                 plt.xlabel("Correlation speed, m/s")
   134                                                 plt.ylabel("Correlation Signal")
   135                                                 plt.show()
   136   2556.3 MiB      0.0 MiB           1       z_err = abs(sigma**2 - sigma_t**2)
   137   2556.3 MiB      0.0 MiB           1       z_err = z_err**0.5 
   138                                             
   139   2556.3 MiB      0.0 MiB           1       print(f"Direct calculated velocity is: {calculate_velocity} m/s, sigma gauss: {z_err} m/s, sigma: {sigma*299792458} m/s")
   140                                         
   141   2556.3 MiB      0.0 MiB           1       return calculate_velocity, z, z_err, sigma*299792458


SN is 105
Direct calculated velocity is: 20.9854055648654 m/s, sigma gauss: 0.19877526707482712 m/s, sigma: 16.000462244536145 m/s
Filename: /home/lambda/code/synth_spectrum/velocity.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16   1451.1 MiB   1451.1 MiB           1   @profile
    17                                         def find_velocity(spectrum: list, template: list, inter: list, mult: int):
    18   1451.1 MiB      0.0 MiB           1       plot = False
    19   1451.1 MiB      0.0 MiB           1       spectrum_ang = spectrum[0]
    20   1451.1 MiB      0.0 MiB           1       spectrum_flux = spectrum[1]
    21   1451.1 MiB      0.0 MiB           1       template_ang = template[0]
    22   1451.1 MiB      0.0 MiB           1       template_flux = template[1]
    23   2393.2 MiB    942.2 MiB           1       spectrum_ang, spectrum_flux = increese_resolution(spectrum, mult)
    24   3333.2 MiB    939.9 MiB           1       template_ang, template_flux = increese_resolution(template, mult)
    25                                         
    26   3333.2 MiB      0.0 MiB           1       aa_start = inter[0]
    27   3333.2 MiB      0.0 MiB           1       aa_end = inter[1]
    28                                         
    29   3379.0 MiB     45.8 MiB           1       obs_crop = np.where((spectrum_ang >= aa_start) & (spectrum_ang <= aa_end))
    30   3424.7 MiB     45.8 MiB           1       template_crop = np.where((template_ang >= aa_start) & (template_ang <= aa_end))
    31                                         
    32   3000.5 MiB   -424.2 MiB           1       spectrum_ang = spectrum_ang[obs_crop]
    33   2576.4 MiB   -424.2 MiB           1       spectrum_flux = spectrum_flux[obs_crop]
    34   2152.2 MiB   -424.2 MiB           1       template_ang = template_ang[template_crop]
    35   1728.0 MiB   -424.2 MiB           1       template_flux = template_flux[template_crop]
    36                                         
    37   1728.0 MiB      0.0 MiB           1       flux_unit = u.Unit('erg s^-1 cm^-2 AA^-1')
    38   1773.8 MiB -2679783.5 MiB     6000016       unc = [10e-10 for x in range(len(spectrum_flux))]
    39   1821.4 MiB     47.6 MiB     6000023       unc_t = [10e-10 for x in range(len(template_flux))]
    40                                         
    41   1821.4 MiB      0.0 MiB           1       speed_arr = []  # for speed calculate in multiply approach
    42                                         
    43   2141.9 MiB    228.8 MiB           2       template = Spectrum1D(spectral_axis=template_ang*u.AA, 
    44   1913.0 MiB     45.8 MiB           1                             flux=template_flux*flux_unit,
    45   1958.8 MiB     45.9 MiB           1                             uncertainty=StdDevUncertainty(unc_t))
    46   2462.5 MiB    228.8 MiB           2       observed = Spectrum1D(spectral_axis=spectrum_ang*u.AA,
    47   2233.5 MiB     45.9 MiB           1                             flux=spectrum_flux*flux_unit,
    48   2279.4 MiB     45.9 MiB           1                             uncertainty=StdDevUncertainty(unc))
    49   2646.6 MiB    184.2 MiB           2       corr, lag = correlation.template_correlate(observed, template,
    50   2462.5 MiB      0.0 MiB           1                                                  lag_units=u.one, method="fft")
    51   2646.6 MiB      0.0 MiB           1       corr = (corr - np.min(corr)) / (np.max(corr) - np.min(corr))  # normalize correlation
    52                                         
    53                                             # autocorrelation part. needs for error estimation
    54   3260.4 MiB    613.7 MiB           2       corr_template, lag_template = correlation.template_correlate(template,
    55   2646.6 MiB      0.0 MiB           1                                                                    template,
    56   2646.6 MiB      0.0 MiB           1                                                                    lag_units=u.one,
    57   2646.6 MiB      0.0 MiB           1                                                                    method="fft")
    58   3260.4 MiB      0.0 MiB           1       corr_template = (corr_template - np.min(corr_template)) / (np.max(corr_template) - np.min(corr_template)) 
    59   3260.4 MiB      0.0 MiB           1       if plot:
    60                                                 plt.plot(lag*299792458, corr)
    61                                                 plt.xlabel("Correlation speed, m/s")
    62                                                 plt.ylabel("Correlation Signal")
    63                                                 plt.show()
    64                                         
    65   3260.4 MiB      0.0 MiB           1       z_peak = lag[np.where(corr==np.max(corr))][0]
    66   3260.4 MiB      0.0 MiB           1       calculate_velocity = z_peak * 299792458
    67   3260.4 MiB      0.0 MiB           1       speed_arr.append(calculate_velocity)
    68   3260.4 MiB      0.0 MiB           1       n = 15 * 1000 # points to the left or right of correlation maximum
    69   3260.4 MiB      0.0 MiB           1       index_peak = np.where(corr == np.amax(corr))[0][0]
    70   3260.4 MiB      0.0 MiB           1       peak_lags = lag[index_peak-n:index_peak+n+1].value
    71   3260.4 MiB      0.0 MiB           1       peak_vals = corr[index_peak-n:index_peak+n+1].value
    72   3260.4 MiB      0.0 MiB           1       p = np.polyfit(peak_lags, peak_vals, deg=2)
    73   3260.4 MiB      0.0 MiB           1       roots = np.roots(p)
    74   3260.4 MiB      0.0 MiB           1       v_fit = np.mean(roots) # maximum lies at mid point between roots
    75   3260.4 MiB      0.0 MiB           1       z = v_fit * 299792458 
    76                                         
    77   3260.4 MiB      0.0 MiB           1       if plot:
    78                                                 plt.scatter(peak_lags * 299792458, peak_vals, label='data')
    79                                                 plt.plot(peak_lags * 299792458, np.polyval(p, peak_lags),
    80                                                          linewidth=0.5, label='fit')
    81                                                 plt.xlabel(lag.unit)
    82                                                 plt.legend()
    83                                                 plt.title('Fit to correlation peak')
    84                                                 plt.show()
    85                                         
    86                                             # Error count part
    87   3260.4 MiB      0.0 MiB           1       sigma_t = np.std(template_flux)
    88   3260.4 MiB      0.0 MiB           1       sigma_g = np.std(spectrum_flux)
    89   3260.4 MiB      0.0 MiB           1       Rt = np.sqrt(np.mean(template_flux**2))
    90   3260.4 MiB      0.0 MiB           1       Rg = np.sqrt(np.mean(spectrum_flux**2))
    91   3260.4 MiB      0.0 MiB           1       sigma =  (1/len(template_flux)) * (sigma_t**2 / Rt**2 + sigma_g**2 / Rg**2) ** 0.5
    92                                             # A is cross-correlation peak intens
    93                                             # THIS PEACE OF SHIT
    94                                             # Calculate velocity error
    95                                             # Moiseev error counting
    96                                             # Optimization correlation peak with gauss function
    97                                             # For this, need to cut-off some lenght of arrray
    98                                             # TO DO: add cuts for multiply peaks fitting.
    99                                             # cut of template-template correlation:
   100   3260.4 MiB      0.0 MiB           1       wings_t = 50 * 1000  # in meters. 
   101   3260.4 MiB      0.0 MiB           1       autocorr_crop = np.where((lag_template*299792458 >= -wings_t) & (lag_template*299792458 <= wings_t))
   102   3165.9 MiB    -94.4 MiB           1       corr_template = corr_template[autocorr_crop]
   103   3071.5 MiB    -94.4 MiB           1       lag_template = lag_template[autocorr_crop]
   104                                         
   105   3071.5 MiB      0.0 MiB           1       initial_guess = [max(corr_template), 0, 1, 0.90] # Initial guess for template-template correlation
   106   3071.5 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   107   3071.5 MiB      0.0 MiB           1                                          lag_template*299792458, corr_template,
   108   3071.5 MiB      0.0 MiB           1                                          p0=initial_guess)
   109                                         
   110   3071.5 MiB      0.0 MiB           1       fit_sigma_t = fit_params[2]
   111   3071.5 MiB      0.0 MiB           1       if plot:
   112                                                 plt.plot(lag_template*299792458, gaussian_function(lag_template*299792458,
   113                                                                                                    *fit_params), 'r-', label='fit')
   114                                                 plt.plot(lag_template*299792458, corr_template)
   115                                                 plt.xlabel("Correlation speed, m/s")
   116                                                 plt.ylabel("Correlation Signal")
   117                                                 plt.show()
   118                                         
   119                                         
   120                                             # cut-off observed-template correlation
   121   3071.5 MiB      0.0 MiB           1       corr_crop = np.where((lag*299792458 >= z-wings_t) & (lag*299792458<= z+wings_t))
   122   3071.5 MiB      0.0 MiB           1       corr = corr[corr_crop]
   123   3071.5 MiB      0.0 MiB           1       lag = lag[corr_crop]
   124                                         
   125   3071.5 MiB      0.0 MiB           1       initial_guess = [max(corr), z, 3000, 0.96]
   126   3071.5 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   127   3071.5 MiB      0.0 MiB           1                                          peak_lags*299792458, peak_vals,
   128   3071.5 MiB      0.0 MiB           1                                          p0=initial_guess)
   129   3071.5 MiB      0.0 MiB           1       fit_sigma = fit_params[2]
   130   3071.5 MiB      0.0 MiB           1       if plot:
   131                                                 plt.plot(lag*299792458, gaussian_function(lag*299792458, *fit_params), 'r-', label='fit')
   132                                                 plt.plot(lag*299792458, corr)
   133                                                 plt.xlabel("Correlation speed, m/s")
   134                                                 plt.ylabel("Correlation Signal")
   135                                                 plt.show()
   136   3071.5 MiB      0.0 MiB           1       z_err = abs(sigma**2 - sigma_t**2)
   137   3071.5 MiB      0.0 MiB           1       z_err = z_err**0.5 
   138                                             
   139   3071.5 MiB      0.0 MiB           1       print(f"Direct calculated velocity is: {calculate_velocity} m/s, sigma gauss: {z_err} m/s, sigma: {sigma*299792458} m/s")
   140                                         
   141   3071.5 MiB      0.0 MiB           1       return calculate_velocity, z, z_err, sigma*299792458


SN is 106
Direct calculated velocity is: 20.9854055648654 m/s, sigma gauss: 0.19877526707482712 m/s, sigma: 16.003615385959822 m/s
Filename: /home/lambda/code/synth_spectrum/velocity.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16   1965.8 MiB   1965.8 MiB           1   @profile
    17                                         def find_velocity(spectrum: list, template: list, inter: list, mult: int):
    18   1965.8 MiB      0.0 MiB           1       plot = False
    19   1965.8 MiB      0.0 MiB           1       spectrum_ang = spectrum[0]
    20   1965.8 MiB      0.0 MiB           1       spectrum_flux = spectrum[1]
    21   1965.8 MiB      0.0 MiB           1       template_ang = template[0]
    22   1965.8 MiB      0.0 MiB           1       template_flux = template[1]
    23   2910.3 MiB    944.5 MiB           1       spectrum_ang, spectrum_flux = increese_resolution(spectrum, mult)
    24   3850.3 MiB    939.9 MiB           1       template_ang, template_flux = increese_resolution(template, mult)
    25                                         
    26   3850.3 MiB      0.0 MiB           1       aa_start = inter[0]
    27   3850.3 MiB      0.0 MiB           1       aa_end = inter[1]
    28                                         
    29   3896.1 MiB     45.8 MiB           1       obs_crop = np.where((spectrum_ang >= aa_start) & (spectrum_ang <= aa_end))
    30   3941.8 MiB     45.8 MiB           1       template_crop = np.where((template_ang >= aa_start) & (template_ang <= aa_end))
    31                                         
    32   3517.6 MiB   -424.2 MiB           1       spectrum_ang = spectrum_ang[obs_crop]
    33   3093.4 MiB   -424.2 MiB           1       spectrum_flux = spectrum_flux[obs_crop]
    34   2669.2 MiB   -424.2 MiB           1       template_ang = template_ang[template_crop]
    35   2245.0 MiB   -424.2 MiB           1       template_flux = template_flux[template_crop]
    36                                         
    37   2245.0 MiB      0.0 MiB           1       flux_unit = u.Unit('erg s^-1 cm^-2 AA^-1')
    38   2290.6 MiB     45.5 MiB     6000016       unc = [10e-10 for x in range(len(spectrum_flux))]
    39   2337.0 MiB     46.5 MiB     6000023       unc_t = [10e-10 for x in range(len(template_flux))]
    40                                         
    41   2337.0 MiB      0.0 MiB           1       speed_arr = []  # for speed calculate in multiply approach
    42                                         
    43   2657.5 MiB    228.9 MiB           2       template = Spectrum1D(spectral_axis=template_ang*u.AA, 
    44   2428.6 MiB     45.8 MiB           1                             flux=template_flux*flux_unit,
    45   2474.4 MiB     45.8 MiB           1                             uncertainty=StdDevUncertainty(unc_t))
    46   2978.0 MiB    228.8 MiB           2       observed = Spectrum1D(spectral_axis=spectrum_ang*u.AA,
    47   2749.0 MiB     45.8 MiB           1                             flux=spectrum_flux*flux_unit,
    48   2794.9 MiB     45.9 MiB           1                             uncertainty=StdDevUncertainty(unc))
    49   3542.9 MiB    564.9 MiB           2       corr, lag = correlation.template_correlate(observed, template,
    50   2978.0 MiB      0.0 MiB           1                                                  lag_units=u.one, method="fft")
    51   3542.9 MiB      0.0 MiB           1       corr = (corr - np.min(corr)) / (np.max(corr) - np.min(corr))  # normalize correlation
    52                                         
    53                                             # autocorrelation part. needs for error estimation
    54   3873.5 MiB    330.6 MiB           2       corr_template, lag_template = correlation.template_correlate(template,
    55   3542.9 MiB      0.0 MiB           1                                                                    template,
    56   3542.9 MiB      0.0 MiB           1                                                                    lag_units=u.one,
    57   3542.9 MiB      0.0 MiB           1                                                                    method="fft")
    58   3873.5 MiB      0.0 MiB           1       corr_template = (corr_template - np.min(corr_template)) / (np.max(corr_template) - np.min(corr_template)) 
    59   3873.5 MiB      0.0 MiB           1       if plot:
    60                                                 plt.plot(lag*299792458, corr)
    61                                                 plt.xlabel("Correlation speed, m/s")
    62                                                 plt.ylabel("Correlation Signal")
    63                                                 plt.show()
    64                                         
    65   3873.5 MiB      0.0 MiB           1       z_peak = lag[np.where(corr==np.max(corr))][0]
    66   3873.5 MiB      0.0 MiB           1       calculate_velocity = z_peak * 299792458
    67   3873.5 MiB      0.0 MiB           1       speed_arr.append(calculate_velocity)
    68   3873.5 MiB      0.0 MiB           1       n = 15 * 1000 # points to the left or right of correlation maximum
    69   3873.5 MiB      0.0 MiB           1       index_peak = np.where(corr == np.amax(corr))[0][0]
    70   3873.5 MiB      0.0 MiB           1       peak_lags = lag[index_peak-n:index_peak+n+1].value
    71   3873.5 MiB      0.0 MiB           1       peak_vals = corr[index_peak-n:index_peak+n+1].value
    72   3873.5 MiB      0.0 MiB           1       p = np.polyfit(peak_lags, peak_vals, deg=2)
    73   3873.5 MiB      0.0 MiB           1       roots = np.roots(p)
    74   3873.5 MiB      0.0 MiB           1       v_fit = np.mean(roots) # maximum lies at mid point between roots
    75   3873.5 MiB      0.0 MiB           1       z = v_fit * 299792458 
    76                                         
    77   3873.5 MiB      0.0 MiB           1       if plot:
    78                                                 plt.scatter(peak_lags * 299792458, peak_vals, label='data')
    79                                                 plt.plot(peak_lags * 299792458, np.polyval(p, peak_lags),
    80                                                          linewidth=0.5, label='fit')
    81                                                 plt.xlabel(lag.unit)
    82                                                 plt.legend()
    83                                                 plt.title('Fit to correlation peak')
    84                                                 plt.show()
    85                                         
    86                                             # Error count part
    87   3873.5 MiB      0.0 MiB           1       sigma_t = np.std(template_flux)
    88   3873.5 MiB      0.0 MiB           1       sigma_g = np.std(spectrum_flux)
    89   3873.5 MiB      0.0 MiB           1       Rt = np.sqrt(np.mean(template_flux**2))
    90   3873.5 MiB      0.0 MiB           1       Rg = np.sqrt(np.mean(spectrum_flux**2))
    91   3873.5 MiB      0.0 MiB           1       sigma =  (1/len(template_flux)) * (sigma_t**2 / Rt**2 + sigma_g**2 / Rg**2) ** 0.5
    92                                             # A is cross-correlation peak intens
    93                                             # THIS PEACE OF SHIT
    94                                             # Calculate velocity error
    95                                             # Moiseev error counting
    96                                             # Optimization correlation peak with gauss function
    97                                             # For this, need to cut-off some lenght of arrray
    98                                             # TO DO: add cuts for multiply peaks fitting.
    99                                             # cut of template-template correlation:
   100   3873.5 MiB      0.0 MiB           1       wings_t = 50 * 1000  # in meters. 
   101   3873.5 MiB      0.0 MiB           1       autocorr_crop = np.where((lag_template*299792458 >= -wings_t) & (lag_template*299792458 <= wings_t))
   102   3779.1 MiB    -94.4 MiB           1       corr_template = corr_template[autocorr_crop]
   103   3684.7 MiB    -94.4 MiB           1       lag_template = lag_template[autocorr_crop]
   104                                         
   105   3684.7 MiB      0.0 MiB           1       initial_guess = [max(corr_template), 0, 1, 0.90] # Initial guess for template-template correlation
   106   3684.7 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   107   3684.7 MiB      0.0 MiB           1                                          lag_template*299792458, corr_template,
   108   3684.7 MiB      0.0 MiB           1                                          p0=initial_guess)
   109                                         
   110   3684.7 MiB      0.0 MiB           1       fit_sigma_t = fit_params[2]
   111   3684.7 MiB      0.0 MiB           1       if plot:
   112                                                 plt.plot(lag_template*299792458, gaussian_function(lag_template*299792458,
   113                                                                                                    *fit_params), 'r-', label='fit')
   114                                                 plt.plot(lag_template*299792458, corr_template)
   115                                                 plt.xlabel("Correlation speed, m/s")
   116                                                 plt.ylabel("Correlation Signal")
   117                                                 plt.show()
   118                                         
   119                                         
   120                                             # cut-off observed-template correlation
   121   3684.7 MiB      0.1 MiB           1       corr_crop = np.where((lag*299792458 >= z-wings_t) & (lag*299792458<= z+wings_t))
   122   3684.7 MiB      0.0 MiB           1       corr = corr[corr_crop]
   123   3684.7 MiB      0.0 MiB           1       lag = lag[corr_crop]
   124                                         
   125   3684.7 MiB      0.0 MiB           1       initial_guess = [max(corr), z, 3000, 0.96]
   126   3684.7 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   127   3684.7 MiB      0.0 MiB           1                                          peak_lags*299792458, peak_vals,
   128   3684.7 MiB      0.0 MiB           1                                          p0=initial_guess)
   129   3684.7 MiB      0.0 MiB           1       fit_sigma = fit_params[2]
   130   3684.7 MiB      0.0 MiB           1       if plot:
   131                                                 plt.plot(lag*299792458, gaussian_function(lag*299792458, *fit_params), 'r-', label='fit')
   132                                                 plt.plot(lag*299792458, corr)
   133                                                 plt.xlabel("Correlation speed, m/s")
   134                                                 plt.ylabel("Correlation Signal")
   135                                                 plt.show()
   136   3684.7 MiB      0.0 MiB           1       z_err = abs(sigma**2 - sigma_t**2)
   137   3684.7 MiB      0.0 MiB           1       z_err = z_err**0.5 
   138                                             
   139   3684.7 MiB      0.0 MiB           1       print(f"Direct calculated velocity is: {calculate_velocity} m/s, sigma gauss: {z_err} m/s, sigma: {sigma*299792458} m/s")
   140                                         
   141   3684.7 MiB      0.0 MiB           1       return calculate_velocity, z, z_err, sigma*299792458


SN is 107
Direct calculated velocity is: 17.987490389074203 m/s, sigma gauss: 0.19877526707482712 m/s, sigma: 16.003688224208766 m/s
Filename: /home/lambda/code/synth_spectrum/velocity.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16   2579.5 MiB   2579.5 MiB           1   @profile
    17                                         def find_velocity(spectrum: list, template: list, inter: list, mult: int):
    18   2579.5 MiB      0.0 MiB           1       plot = False
    19   2579.5 MiB      0.0 MiB           1       spectrum_ang = spectrum[0]
    20   2579.5 MiB      0.0 MiB           1       spectrum_flux = spectrum[1]
    21   2579.5 MiB      0.0 MiB           1       template_ang = template[0]
    22   2579.5 MiB      0.0 MiB           1       template_flux = template[1]
    23   3521.6 MiB    942.2 MiB           1       spectrum_ang, spectrum_flux = increese_resolution(spectrum, mult)
    24   4461.6 MiB    939.9 MiB           1       template_ang, template_flux = increese_resolution(template, mult)
    25                                         
    26   4461.6 MiB      0.0 MiB           1       aa_start = inter[0]
    27   4461.6 MiB      0.0 MiB           1       aa_end = inter[1]
    28                                         
    29   4507.4 MiB     45.8 MiB           1       obs_crop = np.where((spectrum_ang >= aa_start) & (spectrum_ang <= aa_end))
    30   4553.1 MiB     45.8 MiB           1       template_crop = np.where((template_ang >= aa_start) & (template_ang <= aa_end))
    31                                         
    32   4128.9 MiB   -424.2 MiB           1       spectrum_ang = spectrum_ang[obs_crop]
    33   3704.8 MiB   -424.2 MiB           1       spectrum_flux = spectrum_flux[obs_crop]
    34   3280.6 MiB   -424.2 MiB           1       template_ang = template_ang[template_crop]
    35   2856.4 MiB   -424.2 MiB           1       template_flux = template_flux[template_crop]
    36                                         
    37   2856.4 MiB      0.0 MiB           1       flux_unit = u.Unit('erg s^-1 cm^-2 AA^-1')
    38   2902.9 MiB     46.5 MiB     6000016       unc = [10e-10 for x in range(len(spectrum_flux))]
    39   2950.1 MiB     47.2 MiB     6000023       unc_t = [10e-10 for x in range(len(template_flux))]
    40                                         
    41   2950.1 MiB      0.0 MiB           1       speed_arr = []  # for speed calculate in multiply approach
    42                                         
    43   3270.5 MiB    228.9 MiB           2       template = Spectrum1D(spectral_axis=template_ang*u.AA, 
    44   3041.6 MiB     45.8 MiB           1                             flux=template_flux*flux_unit,
    45   3087.4 MiB     45.8 MiB           1                             uncertainty=StdDevUncertainty(unc_t))
    46   3590.9 MiB    228.8 MiB           2       observed = Spectrum1D(spectral_axis=spectrum_ang*u.AA,
    47   3362.0 MiB     45.8 MiB           1                             flux=spectrum_flux*flux_unit,
    48   3407.8 MiB     45.8 MiB           1                             uncertainty=StdDevUncertainty(unc))
    49   3917.3 MiB    326.3 MiB           2       corr, lag = correlation.template_correlate(observed, template,
    50   3590.9 MiB      0.0 MiB           1                                                  lag_units=u.one, method="fft")
    51   3917.3 MiB      0.0 MiB           1       corr = (corr - np.min(corr)) / (np.max(corr) - np.min(corr))  # normalize correlation
    52                                         
    53                                             # autocorrelation part. needs for error estimation
    54   4200.6 MiB    283.3 MiB           2       corr_template, lag_template = correlation.template_correlate(template,
    55   3917.3 MiB      0.0 MiB           1                                                                    template,
    56   3917.3 MiB      0.0 MiB           1                                                                    lag_units=u.one,
    57   3917.3 MiB      0.0 MiB           1                                                                    method="fft")
    58   4200.6 MiB      0.0 MiB           1       corr_template = (corr_template - np.min(corr_template)) / (np.max(corr_template) - np.min(corr_template)) 
    59   4200.6 MiB      0.0 MiB           1       if plot:
    60                                                 plt.plot(lag*299792458, corr)
    61                                                 plt.xlabel("Correlation speed, m/s")
    62                                                 plt.ylabel("Correlation Signal")
    63                                                 plt.show()
    64                                         
    65   4200.6 MiB      0.0 MiB           1       z_peak = lag[np.where(corr==np.max(corr))][0]
    66   4200.6 MiB      0.0 MiB           1       calculate_velocity = z_peak * 299792458
    67   4200.6 MiB      0.0 MiB           1       speed_arr.append(calculate_velocity)
    68   4200.6 MiB      0.0 MiB           1       n = 15 * 1000 # points to the left or right of correlation maximum
    69   4200.6 MiB      0.0 MiB           1       index_peak = np.where(corr == np.amax(corr))[0][0]
    70   4200.6 MiB      0.0 MiB           1       peak_lags = lag[index_peak-n:index_peak+n+1].value
    71   4200.6 MiB      0.0 MiB           1       peak_vals = corr[index_peak-n:index_peak+n+1].value
    72   4200.6 MiB      0.0 MiB           1       p = np.polyfit(peak_lags, peak_vals, deg=2)
    73   4200.6 MiB      0.0 MiB           1       roots = np.roots(p)
    74   4200.6 MiB      0.0 MiB           1       v_fit = np.mean(roots) # maximum lies at mid point between roots
    75   4200.6 MiB      0.0 MiB           1       z = v_fit * 299792458 
    76                                         
    77   4200.6 MiB      0.0 MiB           1       if plot:
    78                                                 plt.scatter(peak_lags * 299792458, peak_vals, label='data')
    79                                                 plt.plot(peak_lags * 299792458, np.polyval(p, peak_lags),
    80                                                          linewidth=0.5, label='fit')
    81                                                 plt.xlabel(lag.unit)
    82                                                 plt.legend()
    83                                                 plt.title('Fit to correlation peak')
    84                                                 plt.show()
    85                                         
    86                                             # Error count part
    87   4200.6 MiB      0.0 MiB           1       sigma_t = np.std(template_flux)
    88   4200.6 MiB      0.0 MiB           1       sigma_g = np.std(spectrum_flux)
    89   4200.6 MiB      0.0 MiB           1       Rt = np.sqrt(np.mean(template_flux**2))
    90   4200.6 MiB      0.0 MiB           1       Rg = np.sqrt(np.mean(spectrum_flux**2))
    91   4200.6 MiB      0.0 MiB           1       sigma =  (1/len(template_flux)) * (sigma_t**2 / Rt**2 + sigma_g**2 / Rg**2) ** 0.5
    92                                             # A is cross-correlation peak intens
    93                                             # THIS PEACE OF SHIT
    94                                             # Calculate velocity error
    95                                             # Moiseev error counting
    96                                             # Optimization correlation peak with gauss function
    97                                             # For this, need to cut-off some lenght of arrray
    98                                             # TO DO: add cuts for multiply peaks fitting.
    99                                             # cut of template-template correlation:
   100   4200.6 MiB      0.0 MiB           1       wings_t = 50 * 1000  # in meters. 
   101   4200.6 MiB      0.0 MiB           1       autocorr_crop = np.where((lag_template*299792458 >= -wings_t) & (lag_template*299792458 <= wings_t))
   102   4106.1 MiB    -94.4 MiB           1       corr_template = corr_template[autocorr_crop]
   103   4011.8 MiB    -94.3 MiB           1       lag_template = lag_template[autocorr_crop]
   104                                         
   105   4011.8 MiB      0.0 MiB           1       initial_guess = [max(corr_template), 0, 1, 0.90] # Initial guess for template-template correlation
   106   4011.8 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   107   4011.8 MiB      0.0 MiB           1                                          lag_template*299792458, corr_template,
   108   4011.8 MiB      0.0 MiB           1                                          p0=initial_guess)
   109                                         
   110   4011.8 MiB      0.0 MiB           1       fit_sigma_t = fit_params[2]
   111   4011.8 MiB      0.0 MiB           1       if plot:
   112                                                 plt.plot(lag_template*299792458, gaussian_function(lag_template*299792458,
   113                                                                                                    *fit_params), 'r-', label='fit')
   114                                                 plt.plot(lag_template*299792458, corr_template)
   115                                                 plt.xlabel("Correlation speed, m/s")
   116                                                 plt.ylabel("Correlation Signal")
   117                                                 plt.show()
   118                                         
   119                                         
   120                                             # cut-off observed-template correlation
   121   4011.7 MiB     -0.1 MiB           1       corr_crop = np.where((lag*299792458 >= z-wings_t) & (lag*299792458<= z+wings_t))
   122   4011.7 MiB      0.0 MiB           1       corr = corr[corr_crop]
   123   4011.7 MiB      0.0 MiB           1       lag = lag[corr_crop]
   124                                         
   125   4011.7 MiB      0.0 MiB           1       initial_guess = [max(corr), z, 3000, 0.96]
   126   4011.7 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   127   4011.7 MiB      0.0 MiB           1                                          peak_lags*299792458, peak_vals,
   128   4011.7 MiB      0.0 MiB           1                                          p0=initial_guess)
   129   4011.7 MiB      0.0 MiB           1       fit_sigma = fit_params[2]
   130   4011.7 MiB      0.0 MiB           1       if plot:
   131                                                 plt.plot(lag*299792458, gaussian_function(lag*299792458, *fit_params), 'r-', label='fit')
   132                                                 plt.plot(lag*299792458, corr)
   133                                                 plt.xlabel("Correlation speed, m/s")
   134                                                 plt.ylabel("Correlation Signal")
   135                                                 plt.show()
   136   4011.7 MiB      0.0 MiB           1       z_err = abs(sigma**2 - sigma_t**2)
   137   4011.7 MiB      0.0 MiB           1       z_err = z_err**0.5 
   138                                             
   139   4011.7 MiB      0.0 MiB           1       print(f"Direct calculated velocity is: {calculate_velocity} m/s, sigma gauss: {z_err} m/s, sigma: {sigma*299792458} m/s")
   140                                         
   141   4011.7 MiB      0.0 MiB           1       return calculate_velocity, z, z_err, sigma*299792458


SN is 108
Direct calculated velocity is: 20.9854055648654 m/s, sigma gauss: 0.19877526707482712 m/s, sigma: 16.003742523568896 m/s
Filename: /home/lambda/code/synth_spectrum/velocity.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16   2905.1 MiB   2905.1 MiB           1   @profile
    17                                         def find_velocity(spectrum: list, template: list, inter: list, mult: int):
    18   2905.1 MiB      0.0 MiB           1       plot = False
    19   2905.1 MiB      0.0 MiB           1       spectrum_ang = spectrum[0]
    20   2905.1 MiB      0.0 MiB           1       spectrum_flux = spectrum[1]
    21   2905.1 MiB      0.0 MiB           1       template_ang = template[0]
    22   2905.1 MiB      0.0 MiB           1       template_flux = template[1]
    23   3849.7 MiB    944.5 MiB           1       spectrum_ang, spectrum_flux = increese_resolution(spectrum, mult)
    24   4789.6 MiB    939.9 MiB           1       template_ang, template_flux = increese_resolution(template, mult)
    25                                         
    26   4789.6 MiB      0.0 MiB           1       aa_start = inter[0]
    27   4789.6 MiB      0.0 MiB           1       aa_end = inter[1]
    28                                         
    29   4835.4 MiB     45.8 MiB           1       obs_crop = np.where((spectrum_ang >= aa_start) & (spectrum_ang <= aa_end))
    30   4881.2 MiB     45.8 MiB           1       template_crop = np.where((template_ang >= aa_start) & (template_ang <= aa_end))
    31                                         
    32   4457.0 MiB   -424.2 MiB           1       spectrum_ang = spectrum_ang[obs_crop]
    33   4032.8 MiB   -424.2 MiB           1       spectrum_flux = spectrum_flux[obs_crop]
    34   3608.6 MiB   -424.2 MiB           1       template_ang = template_ang[template_crop]
    35   3184.4 MiB   -424.2 MiB           1       template_flux = template_flux[template_crop]
    36                                         
    37   3184.4 MiB      0.0 MiB           1       flux_unit = u.Unit('erg s^-1 cm^-2 AA^-1')
    38   3229.8 MiB     45.4 MiB     6000016       unc = [10e-10 for x in range(len(spectrum_flux))]
    39   3276.7 MiB     46.8 MiB     6000023       unc_t = [10e-10 for x in range(len(template_flux))]
    40                                         
    41   3276.7 MiB      0.0 MiB           1       speed_arr = []  # for speed calculate in multiply approach
    42                                         
    43   3597.2 MiB    228.8 MiB           2       template = Spectrum1D(spectral_axis=template_ang*u.AA, 
    44   3368.2 MiB     45.8 MiB           1                             flux=template_flux*flux_unit,
    45   3414.1 MiB     45.9 MiB           1                             uncertainty=StdDevUncertainty(unc_t))
    46   3917.7 MiB    228.8 MiB           2       observed = Spectrum1D(spectral_axis=spectrum_ang*u.AA,
    47   3688.7 MiB     45.8 MiB           1                             flux=spectrum_flux*flux_unit,
    48   3734.6 MiB     45.9 MiB           1                             uncertainty=StdDevUncertainty(unc))
    49   4245.5 MiB    327.9 MiB           2       corr, lag = correlation.template_correlate(observed, template,
    50   3917.7 MiB      0.0 MiB           1                                                  lag_units=u.one, method="fft")
    51   4245.5 MiB      0.0 MiB           1       corr = (corr - np.min(corr)) / (np.max(corr) - np.min(corr))  # normalize correlation
    52                                         
    53                                             # autocorrelation part. needs for error estimation
    54   4528.8 MiB    283.2 MiB           2       corr_template, lag_template = correlation.template_correlate(template,
    55   4245.5 MiB      0.0 MiB           1                                                                    template,
    56   4245.5 MiB      0.0 MiB           1                                                                    lag_units=u.one,
    57   4245.5 MiB      0.0 MiB           1                                                                    method="fft")
    58   4528.8 MiB      0.0 MiB           1       corr_template = (corr_template - np.min(corr_template)) / (np.max(corr_template) - np.min(corr_template)) 
    59   4528.8 MiB      0.0 MiB           1       if plot:
    60                                                 plt.plot(lag*299792458, corr)
    61                                                 plt.xlabel("Correlation speed, m/s")
    62                                                 plt.ylabel("Correlation Signal")
    63                                                 plt.show()
    64                                         
    65   4528.8 MiB      0.0 MiB           1       z_peak = lag[np.where(corr==np.max(corr))][0]
    66   4528.8 MiB      0.0 MiB           1       calculate_velocity = z_peak * 299792458
    67   4528.8 MiB      0.0 MiB           1       speed_arr.append(calculate_velocity)
    68   4528.8 MiB      0.0 MiB           1       n = 15 * 1000 # points to the left or right of correlation maximum
    69   4528.8 MiB      0.0 MiB           1       index_peak = np.where(corr == np.amax(corr))[0][0]
    70   4528.8 MiB      0.0 MiB           1       peak_lags = lag[index_peak-n:index_peak+n+1].value
    71   4528.8 MiB      0.0 MiB           1       peak_vals = corr[index_peak-n:index_peak+n+1].value
    72   4528.8 MiB      0.0 MiB           1       p = np.polyfit(peak_lags, peak_vals, deg=2)
    73   4528.8 MiB      0.0 MiB           1       roots = np.roots(p)
    74   4528.8 MiB      0.0 MiB           1       v_fit = np.mean(roots) # maximum lies at mid point between roots
    75   4528.8 MiB      0.0 MiB           1       z = v_fit * 299792458 
    76                                         
    77   4528.8 MiB      0.0 MiB           1       if plot:
    78                                                 plt.scatter(peak_lags * 299792458, peak_vals, label='data')
    79                                                 plt.plot(peak_lags * 299792458, np.polyval(p, peak_lags),
    80                                                          linewidth=0.5, label='fit')
    81                                                 plt.xlabel(lag.unit)
    82                                                 plt.legend()
    83                                                 plt.title('Fit to correlation peak')
    84                                                 plt.show()
    85                                         
    86                                             # Error count part
    87   4528.8 MiB      0.0 MiB           1       sigma_t = np.std(template_flux)
    88   4528.8 MiB      0.0 MiB           1       sigma_g = np.std(spectrum_flux)
    89   4528.8 MiB      0.0 MiB           1       Rt = np.sqrt(np.mean(template_flux**2))
    90   4528.8 MiB      0.0 MiB           1       Rg = np.sqrt(np.mean(spectrum_flux**2))
    91   4528.8 MiB      0.0 MiB           1       sigma =  (1/len(template_flux)) * (sigma_t**2 / Rt**2 + sigma_g**2 / Rg**2) ** 0.5
    92                                             # A is cross-correlation peak intens
    93                                             # THIS PEACE OF SHIT
    94                                             # Calculate velocity error
    95                                             # Moiseev error counting
    96                                             # Optimization correlation peak with gauss function
    97                                             # For this, need to cut-off some lenght of arrray
    98                                             # TO DO: add cuts for multiply peaks fitting.
    99                                             # cut of template-template correlation:
   100   4528.8 MiB      0.0 MiB           1       wings_t = 50 * 1000  # in meters. 
   101   4528.8 MiB      0.0 MiB           1       autocorr_crop = np.where((lag_template*299792458 >= -wings_t) & (lag_template*299792458 <= wings_t))
   102   4434.4 MiB    -94.4 MiB           1       corr_template = corr_template[autocorr_crop]
   103   4339.9 MiB    -94.4 MiB           1       lag_template = lag_template[autocorr_crop]
   104                                         
   105   4339.9 MiB      0.0 MiB           1       initial_guess = [max(corr_template), 0, 1, 0.90] # Initial guess for template-template correlation
   106   4339.9 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   107   4339.9 MiB      0.0 MiB           1                                          lag_template*299792458, corr_template,
   108   4339.9 MiB      0.0 MiB           1                                          p0=initial_guess)
   109                                         
   110   4339.9 MiB      0.0 MiB           1       fit_sigma_t = fit_params[2]
   111   4339.9 MiB      0.0 MiB           1       if plot:
   112                                                 plt.plot(lag_template*299792458, gaussian_function(lag_template*299792458,
   113                                                                                                    *fit_params), 'r-', label='fit')
   114                                                 plt.plot(lag_template*299792458, corr_template)
   115                                                 plt.xlabel("Correlation speed, m/s")
   116                                                 plt.ylabel("Correlation Signal")
   117                                                 plt.show()
   118                                         
   119                                         
   120                                             # cut-off observed-template correlation
   121   4339.9 MiB      0.0 MiB           1       corr_crop = np.where((lag*299792458 >= z-wings_t) & (lag*299792458<= z+wings_t))
   122   4339.9 MiB      0.0 MiB           1       corr = corr[corr_crop]
   123   4339.9 MiB      0.0 MiB           1       lag = lag[corr_crop]
   124                                         
   125   4339.9 MiB      0.0 MiB           1       initial_guess = [max(corr), z, 3000, 0.96]
   126   4339.9 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   127   4339.9 MiB      0.0 MiB           1                                          peak_lags*299792458, peak_vals,
   128   4339.9 MiB      0.0 MiB           1                                          p0=initial_guess)
   129   4339.9 MiB      0.0 MiB           1       fit_sigma = fit_params[2]
   130   4339.9 MiB      0.0 MiB           1       if plot:
   131                                                 plt.plot(lag*299792458, gaussian_function(lag*299792458, *fit_params), 'r-', label='fit')
   132                                                 plt.plot(lag*299792458, corr)
   133                                                 plt.xlabel("Correlation speed, m/s")
   134                                                 plt.ylabel("Correlation Signal")
   135                                                 plt.show()
   136   4339.9 MiB      0.0 MiB           1       z_err = abs(sigma**2 - sigma_t**2)
   137   4339.9 MiB      0.0 MiB           1       z_err = z_err**0.5 
   138                                             
   139   4339.9 MiB      0.0 MiB           1       print(f"Direct calculated velocity is: {calculate_velocity} m/s, sigma gauss: {z_err} m/s, sigma: {sigma*299792458} m/s")
   140                                         
   141   4339.9 MiB      0.0 MiB           1       return calculate_velocity, z, z_err, sigma*299792458


SN is 109
Direct calculated velocity is: 23.9833207406566 m/s, sigma gauss: 0.19877526707482712 m/s, sigma: 15.998640324668624 m/s
Filename: /home/lambda/code/synth_spectrum/velocity.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16   3234.7 MiB   3234.7 MiB           1   @profile
    17                                         def find_velocity(spectrum: list, template: list, inter: list, mult: int):
    18   3234.7 MiB      0.0 MiB           1       plot = False
    19   3234.7 MiB      0.0 MiB           1       spectrum_ang = spectrum[0]
    20   3234.7 MiB      0.0 MiB           1       spectrum_flux = spectrum[1]
    21   3234.7 MiB      0.0 MiB           1       template_ang = template[0]
    22   3234.7 MiB      0.0 MiB           1       template_flux = template[1]
    23   4176.9 MiB    942.2 MiB           1       spectrum_ang, spectrum_flux = increese_resolution(spectrum, mult)
    24   5116.8 MiB    939.9 MiB           1       template_ang, template_flux = increese_resolution(template, mult)
    25                                         
    26   5116.8 MiB      0.0 MiB           1       aa_start = inter[0]
    27   5116.8 MiB      0.0 MiB           1       aa_end = inter[1]
    28                                         
    29   5162.6 MiB     45.8 MiB           1       obs_crop = np.where((spectrum_ang >= aa_start) & (spectrum_ang <= aa_end))
    30   5208.4 MiB     45.8 MiB           1       template_crop = np.where((template_ang >= aa_start) & (template_ang <= aa_end))
    31                                         
    32   4784.2 MiB   -424.2 MiB           1       spectrum_ang = spectrum_ang[obs_crop]
    33   4360.0 MiB   -424.2 MiB           1       spectrum_flux = spectrum_flux[obs_crop]
    34   3935.8 MiB   -424.2 MiB           1       template_ang = template_ang[template_crop]
    35   3511.6 MiB   -424.2 MiB           1       template_flux = template_flux[template_crop]
    36                                         
    37   3511.6 MiB      0.0 MiB           1       flux_unit = u.Unit('erg s^-1 cm^-2 AA^-1')
    38   3558.2 MiB     46.6 MiB     6000016       unc = [10e-10 for x in range(len(spectrum_flux))]
    39   3605.2 MiB     47.0 MiB     6000023       unc_t = [10e-10 for x in range(len(template_flux))]
    40                                         
    41   3605.2 MiB      0.0 MiB           1       speed_arr = []  # for speed calculate in multiply approach
    42                                         
    43   3925.6 MiB    228.8 MiB           2       template = Spectrum1D(spectral_axis=template_ang*u.AA, 
    44   3696.7 MiB     45.8 MiB           1                             flux=template_flux*flux_unit,
    45   3742.5 MiB     45.8 MiB           1                             uncertainty=StdDevUncertainty(unc_t))
    46   4246.0 MiB    228.8 MiB           2       observed = Spectrum1D(spectral_axis=spectrum_ang*u.AA,
    47   4017.2 MiB     45.8 MiB           1                             flux=spectrum_flux*flux_unit,
    48   4062.9 MiB     45.8 MiB           1                             uncertainty=StdDevUncertainty(unc))
    49   4246.0 MiB  -1693.2 MiB           2       corr, lag = correlation.template_correlate(observed, template,
    50   4246.0 MiB      0.0 MiB           1                                                  lag_units=u.one, method="fft")
    51   2552.9 MiB  -1693.2 MiB           1       corr = (corr - np.min(corr)) / (np.max(corr) - np.min(corr))  # normalize correlation
    52                                         
    53                                             # autocorrelation part. needs for error estimation
    54   3166.7 MiB    613.8 MiB           2       corr_template, lag_template = correlation.template_correlate(template,
    55   2552.9 MiB      0.0 MiB           1                                                                    template,
    56   2552.9 MiB      0.0 MiB           1                                                                    lag_units=u.one,
    57   2552.9 MiB      0.0 MiB           1                                                                    method="fft")
    58   3166.7 MiB      0.0 MiB           1       corr_template = (corr_template - np.min(corr_template)) / (np.max(corr_template) - np.min(corr_template)) 
    59   3166.7 MiB      0.0 MiB           1       if plot:
    60                                                 plt.plot(lag*299792458, corr)
    61                                                 plt.xlabel("Correlation speed, m/s")
    62                                                 plt.ylabel("Correlation Signal")
    63                                                 plt.show()
    64                                         
    65   3166.7 MiB      0.0 MiB           1       z_peak = lag[np.where(corr==np.max(corr))][0]
    66   3166.7 MiB      0.0 MiB           1       calculate_velocity = z_peak * 299792458
    67   3166.7 MiB      0.0 MiB           1       speed_arr.append(calculate_velocity)
    68   3166.7 MiB      0.0 MiB           1       n = 15 * 1000 # points to the left or right of correlation maximum
    69   3166.7 MiB      0.0 MiB           1       index_peak = np.where(corr == np.amax(corr))[0][0]
    70   3166.7 MiB      0.0 MiB           1       peak_lags = lag[index_peak-n:index_peak+n+1].value
    71   3166.7 MiB      0.0 MiB           1       peak_vals = corr[index_peak-n:index_peak+n+1].value
    72   3166.7 MiB      0.0 MiB           1       p = np.polyfit(peak_lags, peak_vals, deg=2)
    73   3166.7 MiB      0.0 MiB           1       roots = np.roots(p)
    74   3166.7 MiB      0.0 MiB           1       v_fit = np.mean(roots) # maximum lies at mid point between roots
    75   3166.7 MiB      0.0 MiB           1       z = v_fit * 299792458 
    76                                         
    77   3166.7 MiB      0.0 MiB           1       if plot:
    78                                                 plt.scatter(peak_lags * 299792458, peak_vals, label='data')
    79                                                 plt.plot(peak_lags * 299792458, np.polyval(p, peak_lags),
    80                                                          linewidth=0.5, label='fit')
    81                                                 plt.xlabel(lag.unit)
    82                                                 plt.legend()
    83                                                 plt.title('Fit to correlation peak')
    84                                                 plt.show()
    85                                         
    86                                             # Error count part
    87   3166.7 MiB      0.0 MiB           1       sigma_t = np.std(template_flux)
    88   3166.7 MiB      0.0 MiB           1       sigma_g = np.std(spectrum_flux)
    89   3166.7 MiB      0.0 MiB           1       Rt = np.sqrt(np.mean(template_flux**2))
    90   3166.7 MiB      0.0 MiB           1       Rg = np.sqrt(np.mean(spectrum_flux**2))
    91   3166.7 MiB      0.0 MiB           1       sigma =  (1/len(template_flux)) * (sigma_t**2 / Rt**2 + sigma_g**2 / Rg**2) ** 0.5
    92                                             # A is cross-correlation peak intens
    93                                             # THIS PEACE OF SHIT
    94                                             # Calculate velocity error
    95                                             # Moiseev error counting
    96                                             # Optimization correlation peak with gauss function
    97                                             # For this, need to cut-off some lenght of arrray
    98                                             # TO DO: add cuts for multiply peaks fitting.
    99                                             # cut of template-template correlation:
   100   3166.7 MiB      0.0 MiB           1       wings_t = 50 * 1000  # in meters. 
   101   3166.7 MiB      0.0 MiB           1       autocorr_crop = np.where((lag_template*299792458 >= -wings_t) & (lag_template*299792458 <= wings_t))
   102   3072.2 MiB    -94.4 MiB           1       corr_template = corr_template[autocorr_crop]
   103   2977.8 MiB    -94.4 MiB           1       lag_template = lag_template[autocorr_crop]
   104                                         
   105   2977.8 MiB      0.0 MiB           1       initial_guess = [max(corr_template), 0, 1, 0.90] # Initial guess for template-template correlation
   106   2977.8 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   107   2977.8 MiB      0.0 MiB           1                                          lag_template*299792458, corr_template,
   108   2977.8 MiB      0.0 MiB           1                                          p0=initial_guess)
   109                                         
   110   2977.8 MiB      0.0 MiB           1       fit_sigma_t = fit_params[2]
   111   2977.8 MiB      0.0 MiB           1       if plot:
   112                                                 plt.plot(lag_template*299792458, gaussian_function(lag_template*299792458,
   113                                                                                                    *fit_params), 'r-', label='fit')
   114                                                 plt.plot(lag_template*299792458, corr_template)
   115                                                 plt.xlabel("Correlation speed, m/s")
   116                                                 plt.ylabel("Correlation Signal")
   117                                                 plt.show()
   118                                         
   119                                         
   120                                             # cut-off observed-template correlation
   121   2977.8 MiB      0.0 MiB           1       corr_crop = np.where((lag*299792458 >= z-wings_t) & (lag*299792458<= z+wings_t))
   122   2977.8 MiB      0.0 MiB           1       corr = corr[corr_crop]
   123   2977.8 MiB      0.0 MiB           1       lag = lag[corr_crop]
   124                                         
   125   2977.8 MiB      0.0 MiB           1       initial_guess = [max(corr), z, 3000, 0.96]
   126   2977.8 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   127   2977.8 MiB      0.0 MiB           1                                          peak_lags*299792458, peak_vals,
   128   2977.8 MiB      0.0 MiB           1                                          p0=initial_guess)
   129   2977.8 MiB      0.0 MiB           1       fit_sigma = fit_params[2]
   130   2977.8 MiB      0.0 MiB           1       if plot:
   131                                                 plt.plot(lag*299792458, gaussian_function(lag*299792458, *fit_params), 'r-', label='fit')
   132                                                 plt.plot(lag*299792458, corr)
   133                                                 plt.xlabel("Correlation speed, m/s")
   134                                                 plt.ylabel("Correlation Signal")
   135                                                 plt.show()
   136   2977.8 MiB      0.0 MiB           1       z_err = abs(sigma**2 - sigma_t**2)
   137   2977.8 MiB      0.0 MiB           1       z_err = z_err**0.5 
   138                                             
   139   2977.8 MiB      0.0 MiB           1       print(f"Direct calculated velocity is: {calculate_velocity} m/s, sigma gauss: {z_err} m/s, sigma: {sigma*299792458} m/s")
   140                                         
   141   2977.8 MiB      0.0 MiB           1       return calculate_velocity, z, z_err, sigma*299792458


Filename: SN_demo.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
     9    232.6 MiB    232.6 MiB           1   @profile
    10                                         def make_good():
    11                                         # s2 = extract_data("data/NES_model_110000.rgs", text=True)
    12    259.3 MiB     26.7 MiB           1       s3 = extract_data("data/NES_model_60000.rgs", text=True)
    13                                         # s4 = extract_data("data/NES_model_40000.rgs", text=True)
    14                                         #s5 = extract_data("data/NES_model_15000.rgs", text=True)
    15    283.0 MiB     23.8 MiB           1       a_template, f_template = extract_data("data/NES_model_110000.rgs", text=True)
    16                                         
    17                                         # spectrum_arr = [s3, s3, s3, s3, s3, s3, s3, s3, s3, s3]
    18                                         # spectrum_arr = [s5, s5, s5, s5, s5, s5, s5, s5, s5, s5]
    19    283.0 MiB      0.0 MiB           1       spectrum_arr = [s3]
    20                                         # spectrum_arr = [[a_template, f_template]]
    21    283.0 MiB      0.0 MiB           1       spectrum_names = ["R=60000 inter", "R=15000 inter"]
    22    283.0 MiB      0.0 MiB           1       spectrum_names_direct = ["R=60000", "R=60000", "R=60000", "R=60000", "R=60000","R=60000","R=60000","R=60000","R=60000","R=60000"]
    23                                         # spectrum_names_direct = ["R=15000", "R=15000", "R=15000", "R=15000", "R=15000","R=15000","R=15000","R=15000","R=15000","R=15000"]
    24                                         
    25    283.0 MiB      0.0 MiB           1       total_velocity_data = []
    26    283.0 MiB      0.0 MiB           1       total_delta = []
    27    283.0 MiB      0.0 MiB           1       total_delta_inter = []
    28    283.0 MiB      0.0 MiB           1       total_velocity_err = []
    29                                         
    30    283.0 MiB      0.0 MiB           1       v = 20 # in meters
    31    283.0 MiB      0.0 MiB           1       dots = 200
    32    283.0 MiB      0.0 MiB           1       plot = False
    33                                         
    34   1871.2 MiB      0.0 MiB           2       for i in range(len(spectrum_arr)):
    35    283.0 MiB      0.0 MiB           1           velocity = []
    36    283.0 MiB      0.0 MiB           1           z_velocity = []
    37    283.0 MiB      0.0 MiB           1           SN = []
    38    283.0 MiB      0.0 MiB           1           delta = []
    39    283.0 MiB      0.0 MiB           1           delta_inter = []
    40    283.0 MiB      0.0 MiB           1           z_err_arr = []
    41                                                 # Now, make a variance between arrays -- add some noise
    42                                                 # from SN 1 to 100
    43   3753.0 MiB  -8510.9 MiB          11           for j in range(100, 110, 1):
    44   3753.0 MiB  -6629.1 MiB          10               print(f"SN is {j}")
    45   3753.0 MiB  -6629.1 MiB          10               ang = np.copy(spectrum_arr[i][0])
    46   3753.0 MiB  -6629.0 MiB          10               flux = np.copy(spectrum_arr[i][1])
    47   3753.0 MiB  -6617.6 MiB          10               _, ang = pyasl.dopplerShift(ang, flux, v / 1000, edgeHandling="firstlast")
    48   3753.0 MiB  -6629.1 MiB          10               noise_spectrum = np.copy(flux)
    49   3753.0 MiB  -6629.0 MiB          10               noise = np.random.normal(loc=0, scale=1/j, size=len(flux))
    50   3753.0 MiB  -6629.1 MiB          10               noise_spectrum = noise_spectrum + noise
    51   3753.0 MiB -11681.7 MiB          20               cv, z, z_err, s = find_velocity([ang, noise_spectrum], 
    52   3753.0 MiB  -6629.1 MiB          10                                               [a_template, f_template],
    53   3753.0 MiB  -6629.1 MiB          10                                               [4700, 5000], dots)
    54   3753.0 MiB  -8510.9 MiB          10               velocity.append(cv)
    55   3753.0 MiB  -8510.9 MiB          10               z_velocity.append(z)
    56   3753.0 MiB  -8510.9 MiB          10               SN.append(j)
    57   3753.0 MiB  -8510.9 MiB          10               delta_inter.append(v - z)  # For delta graph
    58   3753.0 MiB  -8510.9 MiB          10               delta.append(v - cv)
    59   3753.0 MiB  -8510.9 MiB          10               z_err_arr.append(s)
    60                                         
    61   3753.0 MiB  -8510.9 MiB          10               del noise_spectrum
    62   3753.0 MiB  -8510.9 MiB          10               del ang
    63   3753.0 MiB  -8510.9 MiB          10               del flux
    64                                         
    65   1871.2 MiB  -1881.8 MiB           1           velocity_data = [velocity, z_velocity]
    66   1871.2 MiB      0.0 MiB           1           total_velocity_data.append(velocity_data)
    67   1871.2 MiB      0.0 MiB           1           total_delta_inter.append(delta_inter)
    68   1871.2 MiB      0.0 MiB           1           total_delta.append(delta)
    69   1871.2 MiB      0.0 MiB           1           total_velocity_err.append(z_err_arr)
    70                                                 
    71                                         
    72                                         # A very bad part. btw -- it's time to get it done
    73   1871.2 MiB      0.0 MiB           1       from matplotlib.ticker import MultipleLocator
    74   1871.2 MiB      0.0 MiB           1       import matplotlib.font_manager as fm
    75   1871.2 MiB      0.0 MiB           2       gs_font = fm.FontProperties(
    76   1871.2 MiB      0.0 MiB           1                       fname='/System/Library/Fonts/Supplemental/GillSans.ttc')
    77                                         
    78   1871.2 MiB      0.0 MiB           1       plt.style.use('./old-style.mplstyle')
    79                                         # plt.grid()
    80   1871.2 MiB      0.0 MiB           1       WIDTH, HEIGHT, DPI = 700, 500, 100
    81   1152.5 MiB   -718.8 MiB           1       fig, ax = plt.subplots(figsize=(WIDTH/DPI, HEIGHT/DPI), dpi=DPI)
    82   1152.5 MiB      0.0 MiB           1       linestyle = ['solid', "dashed", 'dotted', 'dashdot', 'solid', 'dashed','dotted', 'dashdot', 'solid', 'dashed']
    83                                         
    84   1152.5 MiB      0.0 MiB           2       for i in range(len(spectrum_arr)):
    85   1152.5 MiB      0.0 MiB           1           ax.errorbar(SN, total_delta[i], total_velocity_err[i], color="k", linestyle=linestyle[i], label=spectrum_names_direct[i])
    86                                         
    87   1152.5 MiB      0.0 MiB           1       if plot:
    88                                                 plt.title(f"Delta graph for {v} m/s")
    89                                                 plt.xlabel("S/N", fontsize=14)
    90                                                 plt.ylabel("Delta", fontsize=14)
    91                                                 plt.legend()
    92                                                 plt.show()


