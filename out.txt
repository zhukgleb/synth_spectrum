SN is 100
Direct calculated velocity is: 23.98332200543526 m/s, sigma gauss: 0.1987752696171579 m/s, sigma: 32.000087273327175 m/s
Filename: /home/lambda/code/synth_spectrum/velocity.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16    290.5 MiB    290.5 MiB           1   @profile
    17                                         def find_velocity(spectrum: list, template: list, inter: list, mult: int):
    18    290.5 MiB      0.0 MiB           1       plot = False
    19    290.5 MiB      0.0 MiB           1       spectrum_ang = spectrum[0]
    20    290.5 MiB      0.0 MiB           1       spectrum_flux = spectrum[1]
    21    290.5 MiB      0.0 MiB           1       template_ang = template[0]
    22    290.5 MiB      0.0 MiB           1       template_flux = template[1]
    23    770.5 MiB    480.0 MiB           1       spectrum_ang, spectrum_flux = increese_resolution(spectrum, mult)
    24   1240.6 MiB    470.1 MiB           1       template_ang, template_flux = increese_resolution(template, mult)
    25                                         
    26   1240.6 MiB      0.0 MiB           1       aa_start = inter[0]
    27   1240.6 MiB      0.0 MiB           1       aa_end = inter[1]
    28                                         
    29   1287.5 MiB     46.9 MiB           1       obs_crop = np.where((spectrum_ang >= aa_start) & (spectrum_ang <= aa_end))
    30   1310.4 MiB     22.9 MiB           1       template_crop = np.where((template_ang >= aa_start) & (template_ang <= aa_end))
    31                                         
    32   1075.5 MiB   -234.9 MiB           1       spectrum_ang = spectrum_ang[obs_crop]
    33    856.9 MiB   -218.6 MiB           1       spectrum_flux = spectrum_flux[obs_crop]
    34    644.8 MiB   -212.1 MiB           1       template_ang = template_ang[template_crop]
    35    432.7 MiB   -212.1 MiB           1       template_flux = template_flux[template_crop]
    36                                         
    37    432.7 MiB      0.0 MiB           1       flux_unit = u.Unit('erg s^-1 cm^-2 AA^-1')
    38    457.3 MiB     24.6 MiB     3000010       unc = [10e-10 for x in range(len(spectrum_flux))]
    39    481.4 MiB     24.1 MiB     3000013       unc_t = [10e-10 for x in range(len(template_flux))]
    40                                         
    41    481.4 MiB      0.0 MiB           1       speed_arr = []  # for speed calculate in multiply approach
    42                                         
    43    708.6 MiB    158.1 MiB           2       template = Spectrum1D(spectral_axis=template_ang*u.AA, 
    44    525.1 MiB     22.9 MiB           1                             flux=template_flux*flux_unit,
    45    571.3 MiB     46.2 MiB           1                             uncertainty=StdDevUncertainty(unc_t))
    46    868.9 MiB    137.4 MiB           2       observed = Spectrum1D(spectral_axis=spectrum_ang*u.AA,
    47    708.6 MiB      0.0 MiB           1                             flux=spectrum_flux*flux_unit,
    48    731.5 MiB     22.9 MiB           1                             uncertainty=StdDevUncertainty(unc))
    49   1837.1 MiB    968.2 MiB           2       corr, lag = correlation.template_correlate(observed, template,
    50    868.9 MiB      0.0 MiB           1                                                  lag_units=u.one, method="fft")
    51   1789.8 MiB    -47.2 MiB           1       corr = (corr - np.min(corr)) / (np.max(corr) - np.min(corr))  # normalize correlation
    52                                         
    53                                             # autocorrelation part. needs for error estimation
    54   2096.8 MiB    306.9 MiB           2       corr_template, lag_template = correlation.template_correlate(template,
    55   1789.8 MiB      0.0 MiB           1                                                                    template,
    56   1789.8 MiB      0.0 MiB           1                                                                    lag_units=u.one,
    57   1789.8 MiB      0.0 MiB           1                                                                    method="fft")
    58   2049.6 MiB    -47.2 MiB           1       corr_template = (corr_template - np.min(corr_template)) / (np.max(corr_template) - np.min(corr_template)) 
    59   2049.6 MiB      0.0 MiB           1       if plot:
    60                                                 plt.plot(lag*299792458, corr)
    61                                                 plt.xlabel("Correlation speed, m/s")
    62                                                 plt.ylabel("Correlation Signal")
    63                                                 plt.show()
    64                                         
    65   2049.6 MiB      0.0 MiB           1       z_peak = lag[np.where(corr==np.max(corr))][0]
    66   2049.6 MiB      0.0 MiB           1       calculate_velocity = z_peak * 299792458
    67   2049.6 MiB      0.0 MiB           1       speed_arr.append(calculate_velocity)
    68   2049.6 MiB      0.0 MiB           1       n = 15 * 1000 # points to the left or right of correlation maximum
    69   2049.6 MiB      0.0 MiB           1       index_peak = np.where(corr == np.amax(corr))[0][0]
    70   2049.6 MiB      0.0 MiB           1       peak_lags = lag[index_peak-n:index_peak+n+1].value
    71   2049.6 MiB      0.0 MiB           1       peak_vals = corr[index_peak-n:index_peak+n+1].value
    72   2050.2 MiB      0.6 MiB           1       p = np.polyfit(peak_lags, peak_vals, deg=2)
    73   2050.3 MiB      0.1 MiB           1       roots = np.roots(p)
    74   2050.3 MiB      0.0 MiB           1       v_fit = np.mean(roots) # maximum lies at mid point between roots
    75   2050.3 MiB      0.0 MiB           1       z = v_fit * 299792458 
    76                                         
    77   2050.3 MiB      0.0 MiB           1       if plot:
    78                                                 plt.scatter(peak_lags * 299792458, peak_vals, label='data')
    79                                                 plt.plot(peak_lags * 299792458, np.polyval(p, peak_lags),
    80                                                          linewidth=0.5, label='fit')
    81                                                 plt.xlabel(lag.unit)
    82                                                 plt.legend()
    83                                                 plt.title('Fit to correlation peak')
    84                                                 plt.show()
    85                                         
    86                                             # Error count part
    87   2050.4 MiB      0.1 MiB           1       sigma_t = np.std(template_flux)
    88   2050.4 MiB      0.0 MiB           1       sigma_g = np.std(spectrum_flux)
    89   2050.4 MiB      0.0 MiB           1       Rt = np.sqrt(np.mean(template_flux**2))
    90   2050.4 MiB      0.0 MiB           1       Rg = np.sqrt(np.mean(spectrum_flux**2))
    91   2050.4 MiB      0.0 MiB           1       sigma =  (1/len(template_flux)) * (sigma_t**2 / Rt**2 + sigma_g**2 / Rg**2) ** 0.5
    92                                             # A is cross-correlation peak intens
    93                                             # THIS PEACE OF SHIT
    94                                             # Calculate velocity error
    95                                             # Moiseev error counting
    96                                             # Optimization correlation peak with gauss function
    97                                             # For this, need to cut-off some lenght of arrray
    98                                             # TO DO: add cuts for multiply peaks fitting.
    99                                             # cut of template-template correlation:
   100   2050.4 MiB      0.0 MiB           1       wings_t = 50 * 1000  # in meters. 
   101   2050.4 MiB      0.0 MiB           1       autocorr_crop = np.where((lag_template*299792458 >= -wings_t) & (lag_template*299792458 <= wings_t))
   102   2050.4 MiB      0.0 MiB           1       corr_template = corr_template[autocorr_crop]
   103   2003.2 MiB    -47.2 MiB           1       lag_template = lag_template[autocorr_crop]
   104                                         
   105   2003.2 MiB      0.0 MiB           1       initial_guess = [max(corr_template), 0, 1, 0.90] # Initial guess for template-template correlation
   106   2003.5 MiB      0.2 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   107   2003.2 MiB      0.0 MiB           1                                          lag_template*299792458, corr_template,
   108   2003.2 MiB      0.0 MiB           1                                          p0=initial_guess)
   109                                         
   110   2003.5 MiB      0.0 MiB           1       fit_sigma_t = fit_params[2]
   111   2003.5 MiB      0.0 MiB           1       if plot:
   112                                                 plt.plot(lag_template*299792458, gaussian_function(lag_template*299792458,
   113                                                                                                    *fit_params), 'r-', label='fit')
   114                                                 plt.plot(lag_template*299792458, corr_template)
   115                                                 plt.xlabel("Correlation speed, m/s")
   116                                                 plt.ylabel("Correlation Signal")
   117                                                 plt.show()
   118                                         
   119                                         
   120                                             # cut-off observed-template correlation
   121   2003.5 MiB      0.0 MiB           1       corr_crop = np.where((lag*299792458 >= z-wings_t) & (lag*299792458<= z+wings_t))
   122   2003.5 MiB      0.0 MiB           1       corr = corr[corr_crop]
   123   2003.5 MiB      0.0 MiB           1       lag = lag[corr_crop]
   124                                         
   125   2003.5 MiB      0.0 MiB           1       initial_guess = [max(corr), z, 3000, 0.96]
   126   2003.5 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   127   2003.5 MiB      0.0 MiB           1                                          peak_lags*299792458, peak_vals,
   128   2003.5 MiB      0.0 MiB           1                                          p0=initial_guess)
   129   2003.5 MiB      0.0 MiB           1       fit_sigma = fit_params[2]
   130   2003.5 MiB      0.0 MiB           1       if plot:
   131                                                 plt.plot(lag*299792458, gaussian_function(lag*299792458, *fit_params), 'r-', label='fit')
   132                                                 plt.plot(lag*299792458, corr)
   133                                                 plt.xlabel("Correlation speed, m/s")
   134                                                 plt.ylabel("Correlation Signal")
   135                                                 plt.show()
   136   2003.5 MiB      0.0 MiB           1       z_err = abs(sigma**2 - sigma_t**2)
   137   2003.5 MiB      0.0 MiB           1       z_err = z_err**0.5 
   138                                             
   139   2003.5 MiB      0.0 MiB           1       print(f"Direct calculated velocity is: {calculate_velocity} m/s, sigma gauss: {z_err} m/s, sigma: {sigma*299792458} m/s")
   140                                         
   141   2003.5 MiB      0.0 MiB           1       return calculate_velocity, z, z_err, sigma*299792458


SN is 101
Direct calculated velocity is: 17.987491321016375 m/s, sigma gauss: 0.1987752696171579 m/s, sigma: 31.99842430563216 m/s
Filename: /home/lambda/code/synth_spectrum/velocity.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16   1956.3 MiB   1956.3 MiB           1   @profile
    17                                         def find_velocity(spectrum: list, template: list, inter: list, mult: int):
    18   1956.3 MiB      0.0 MiB           1       plot = False
    19   1956.3 MiB      0.0 MiB           1       spectrum_ang = spectrum[0]
    20   1956.3 MiB      0.0 MiB           1       spectrum_flux = spectrum[1]
    21   1956.3 MiB      0.0 MiB           1       template_ang = template[0]
    22   1956.3 MiB      0.0 MiB           1       template_flux = template[1]
    23   2191.2 MiB    234.9 MiB           1       spectrum_ang, spectrum_flux = increese_resolution(spectrum, mult)
    24   2661.1 MiB    470.0 MiB           1       template_ang, template_flux = increese_resolution(template, mult)
    25                                         
    26   2661.1 MiB      0.0 MiB           1       aa_start = inter[0]
    27   2661.1 MiB      0.0 MiB           1       aa_end = inter[1]
    28                                         
    29   2661.1 MiB      0.0 MiB           1       obs_crop = np.where((spectrum_ang >= aa_start) & (spectrum_ang <= aa_end))
    30   2661.1 MiB      0.0 MiB           1       template_crop = np.where((template_ang >= aa_start) & (template_ang <= aa_end))
    31                                         
    32   2661.1 MiB      0.0 MiB           1       spectrum_ang = spectrum_ang[obs_crop]
    33   2426.2 MiB   -234.9 MiB           1       spectrum_flux = spectrum_flux[obs_crop]
    34   2191.3 MiB   -235.0 MiB           1       template_ang = template_ang[template_crop]
    35   1956.3 MiB   -235.0 MiB           1       template_flux = template_flux[template_crop]
    36                                         
    37   1956.3 MiB      0.0 MiB           1       flux_unit = u.Unit('erg s^-1 cm^-2 AA^-1')
    38   1956.3 MiB      0.0 MiB     3000010       unc = [10e-10 for x in range(len(spectrum_flux))]
    39   1956.3 MiB      0.0 MiB     3000013       unc_t = [10e-10 for x in range(len(template_flux))]
    40                                         
    41   1956.3 MiB      0.0 MiB           1       speed_arr = []  # for speed calculate in multiply approach
    42                                         
    43   1956.3 MiB      0.0 MiB           2       template = Spectrum1D(spectral_axis=template_ang*u.AA, 
    44   1956.3 MiB      0.0 MiB           1                             flux=template_flux*flux_unit,
    45   1956.3 MiB      0.0 MiB           1                             uncertainty=StdDevUncertainty(unc_t))
    46   1956.3 MiB      0.0 MiB           2       observed = Spectrum1D(spectral_axis=spectrum_ang*u.AA,
    47   1956.3 MiB      0.0 MiB           1                             flux=spectrum_flux*flux_unit,
    48   1956.3 MiB      0.0 MiB           1                             uncertainty=StdDevUncertainty(unc))
    49   2263.2 MiB    307.0 MiB           2       corr, lag = correlation.template_correlate(observed, template,
    50   1956.3 MiB      0.0 MiB           1                                                  lag_units=u.one, method="fft")
    51   2216.0 MiB    -47.2 MiB           1       corr = (corr - np.min(corr)) / (np.max(corr) - np.min(corr))  # normalize correlation
    52                                         
    53                                             # autocorrelation part. needs for error estimation
    54   2428.5 MiB    212.5 MiB           2       corr_template, lag_template = correlation.template_correlate(template,
    55   2216.0 MiB      0.0 MiB           1                                                                    template,
    56   2216.0 MiB      0.0 MiB           1                                                                    lag_units=u.one,
    57   2216.0 MiB      0.0 MiB           1                                                                    method="fft")
    58   2381.3 MiB    -47.2 MiB           1       corr_template = (corr_template - np.min(corr_template)) / (np.max(corr_template) - np.min(corr_template)) 
    59   2381.3 MiB      0.0 MiB           1       if plot:
    60                                                 plt.plot(lag*299792458, corr)
    61                                                 plt.xlabel("Correlation speed, m/s")
    62                                                 plt.ylabel("Correlation Signal")
    63                                                 plt.show()
    64                                         
    65   2381.3 MiB      0.0 MiB           1       z_peak = lag[np.where(corr==np.max(corr))][0]
    66   2381.3 MiB      0.0 MiB           1       calculate_velocity = z_peak * 299792458
    67   2381.3 MiB      0.0 MiB           1       speed_arr.append(calculate_velocity)
    68   2381.3 MiB      0.0 MiB           1       n = 15 * 1000 # points to the left or right of correlation maximum
    69   2381.3 MiB      0.0 MiB           1       index_peak = np.where(corr == np.amax(corr))[0][0]
    70   2381.3 MiB      0.0 MiB           1       peak_lags = lag[index_peak-n:index_peak+n+1].value
    71   2381.3 MiB      0.0 MiB           1       peak_vals = corr[index_peak-n:index_peak+n+1].value
    72   2381.3 MiB      0.0 MiB           1       p = np.polyfit(peak_lags, peak_vals, deg=2)
    73   2381.3 MiB      0.0 MiB           1       roots = np.roots(p)
    74   2381.3 MiB      0.0 MiB           1       v_fit = np.mean(roots) # maximum lies at mid point between roots
    75   2381.3 MiB      0.0 MiB           1       z = v_fit * 299792458 
    76                                         
    77   2381.3 MiB      0.0 MiB           1       if plot:
    78                                                 plt.scatter(peak_lags * 299792458, peak_vals, label='data')
    79                                                 plt.plot(peak_lags * 299792458, np.polyval(p, peak_lags),
    80                                                          linewidth=0.5, label='fit')
    81                                                 plt.xlabel(lag.unit)
    82                                                 plt.legend()
    83                                                 plt.title('Fit to correlation peak')
    84                                                 plt.show()
    85                                         
    86                                             # Error count part
    87   2381.3 MiB      0.0 MiB           1       sigma_t = np.std(template_flux)
    88   2381.3 MiB      0.0 MiB           1       sigma_g = np.std(spectrum_flux)
    89   2381.3 MiB      0.0 MiB           1       Rt = np.sqrt(np.mean(template_flux**2))
    90   2381.3 MiB      0.0 MiB           1       Rg = np.sqrt(np.mean(spectrum_flux**2))
    91   2381.3 MiB      0.0 MiB           1       sigma =  (1/len(template_flux)) * (sigma_t**2 / Rt**2 + sigma_g**2 / Rg**2) ** 0.5
    92                                             # A is cross-correlation peak intens
    93                                             # THIS PEACE OF SHIT
    94                                             # Calculate velocity error
    95                                             # Moiseev error counting
    96                                             # Optimization correlation peak with gauss function
    97                                             # For this, need to cut-off some lenght of arrray
    98                                             # TO DO: add cuts for multiply peaks fitting.
    99                                             # cut of template-template correlation:
   100   2381.3 MiB      0.0 MiB           1       wings_t = 50 * 1000  # in meters. 
   101   2381.3 MiB      0.0 MiB           1       autocorr_crop = np.where((lag_template*299792458 >= -wings_t) & (lag_template*299792458 <= wings_t))
   102   2381.3 MiB      0.0 MiB           1       corr_template = corr_template[autocorr_crop]
   103   2334.1 MiB    -47.2 MiB           1       lag_template = lag_template[autocorr_crop]
   104                                         
   105   2334.1 MiB      0.0 MiB           1       initial_guess = [max(corr_template), 0, 1, 0.90] # Initial guess for template-template correlation
   106   2334.1 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   107   2334.1 MiB      0.0 MiB           1                                          lag_template*299792458, corr_template,
   108   2334.1 MiB      0.0 MiB           1                                          p0=initial_guess)
   109                                         
   110   2334.1 MiB      0.0 MiB           1       fit_sigma_t = fit_params[2]
   111   2334.1 MiB      0.0 MiB           1       if plot:
   112                                                 plt.plot(lag_template*299792458, gaussian_function(lag_template*299792458,
   113                                                                                                    *fit_params), 'r-', label='fit')
   114                                                 plt.plot(lag_template*299792458, corr_template)
   115                                                 plt.xlabel("Correlation speed, m/s")
   116                                                 plt.ylabel("Correlation Signal")
   117                                                 plt.show()
   118                                         
   119                                         
   120                                             # cut-off observed-template correlation
   121   2334.1 MiB      0.0 MiB           1       corr_crop = np.where((lag*299792458 >= z-wings_t) & (lag*299792458<= z+wings_t))
   122   2334.1 MiB      0.0 MiB           1       corr = corr[corr_crop]
   123   2334.1 MiB      0.0 MiB           1       lag = lag[corr_crop]
   124                                         
   125   2334.1 MiB      0.0 MiB           1       initial_guess = [max(corr), z, 3000, 0.96]
   126   2334.1 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   127   2334.1 MiB      0.0 MiB           1                                          peak_lags*299792458, peak_vals,
   128   2334.1 MiB      0.0 MiB           1                                          p0=initial_guess)
   129   2334.1 MiB      0.0 MiB           1       fit_sigma = fit_params[2]
   130   2334.1 MiB      0.0 MiB           1       if plot:
   131                                                 plt.plot(lag*299792458, gaussian_function(lag*299792458, *fit_params), 'r-', label='fit')
   132                                                 plt.plot(lag*299792458, corr)
   133                                                 plt.xlabel("Correlation speed, m/s")
   134                                                 plt.ylabel("Correlation Signal")
   135                                                 plt.show()
   136   2334.1 MiB      0.0 MiB           1       z_err = abs(sigma**2 - sigma_t**2)
   137   2334.1 MiB      0.0 MiB           1       z_err = z_err**0.5 
   138                                             
   139   2334.1 MiB      0.0 MiB           1       print(f"Direct calculated velocity is: {calculate_velocity} m/s, sigma gauss: {z_err} m/s, sigma: {sigma*299792458} m/s")
   140                                         
   141   2334.1 MiB      0.0 MiB           1       return calculate_velocity, z, z_err, sigma*299792458


SN is 102
Direct calculated velocity is: 17.987491321016375 m/s, sigma gauss: 0.19877526961715794 m/s, sigma: 31.994642038796925 m/s
Filename: /home/lambda/code/synth_spectrum/velocity.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16   2286.9 MiB   2286.9 MiB           1   @profile
    17                                         def find_velocity(spectrum: list, template: list, inter: list, mult: int):
    18   2286.9 MiB      0.0 MiB           1       plot = False
    19   2286.9 MiB      0.0 MiB           1       spectrum_ang = spectrum[0]
    20   2286.9 MiB      0.0 MiB           1       spectrum_flux = spectrum[1]
    21   2286.9 MiB      0.0 MiB           1       template_ang = template[0]
    22   2286.9 MiB      0.0 MiB           1       template_flux = template[1]
    23   2756.7 MiB    469.9 MiB           1       spectrum_ang, spectrum_flux = increese_resolution(spectrum, mult)
    24   3226.8 MiB    470.1 MiB           1       template_ang, template_flux = increese_resolution(template, mult)
    25                                         
    26   3226.8 MiB      0.0 MiB           1       aa_start = inter[0]
    27   3226.8 MiB      0.0 MiB           1       aa_end = inter[1]
    28                                         
    29   3226.8 MiB      0.0 MiB           1       obs_crop = np.where((spectrum_ang >= aa_start) & (spectrum_ang <= aa_end))
    30   3226.8 MiB      0.0 MiB           1       template_crop = np.where((template_ang >= aa_start) & (template_ang <= aa_end))
    31                                         
    32   2991.8 MiB   -235.0 MiB           1       spectrum_ang = spectrum_ang[obs_crop]
    33   2756.8 MiB   -235.0 MiB           1       spectrum_flux = spectrum_flux[obs_crop]
    34   2521.8 MiB   -235.0 MiB           1       template_ang = template_ang[template_crop]
    35   2286.9 MiB   -235.0 MiB           1       template_flux = template_flux[template_crop]
    36                                         
    37   2286.9 MiB      0.0 MiB           1       flux_unit = u.Unit('erg s^-1 cm^-2 AA^-1')
    38   2286.9 MiB      0.0 MiB     3000010       unc = [10e-10 for x in range(len(spectrum_flux))]
    39   2286.9 MiB      0.0 MiB     3000013       unc_t = [10e-10 for x in range(len(template_flux))]
    40                                         
    41   2286.9 MiB      0.0 MiB           1       speed_arr = []  # for speed calculate in multiply approach
    42                                         
    43   2286.9 MiB      0.0 MiB           2       template = Spectrum1D(spectral_axis=template_ang*u.AA, 
    44   2286.9 MiB      0.0 MiB           1                             flux=template_flux*flux_unit,
    45   2286.9 MiB      0.0 MiB           1                             uncertainty=StdDevUncertainty(unc_t))
    46   2286.9 MiB      0.0 MiB           2       observed = Spectrum1D(spectral_axis=spectrum_ang*u.AA,
    47   2286.9 MiB      0.0 MiB           1                             flux=spectrum_flux*flux_unit,
    48   2286.9 MiB      0.0 MiB           1                             uncertainty=StdDevUncertainty(unc))
    49   2498.6 MiB    211.8 MiB           2       corr, lag = correlation.template_correlate(observed, template,
    50   2286.9 MiB      0.0 MiB           1                                                  lag_units=u.one, method="fft")
    51   2427.8 MiB    -70.8 MiB           1       corr = (corr - np.min(corr)) / (np.max(corr) - np.min(corr))  # normalize correlation
    52                                         
    53                                             # autocorrelation part. needs for error estimation
    54   2828.8 MiB    401.0 MiB           2       corr_template, lag_template = correlation.template_correlate(template,
    55   2427.8 MiB      0.0 MiB           1                                                                    template,
    56   2427.8 MiB      0.0 MiB           1                                                                    lag_units=u.one,
    57   2427.8 MiB      0.0 MiB           1                                                                    method="fft")
    58   2781.6 MiB    -47.2 MiB           1       corr_template = (corr_template - np.min(corr_template)) / (np.max(corr_template) - np.min(corr_template)) 
    59   2781.6 MiB      0.0 MiB           1       if plot:
    60                                                 plt.plot(lag*299792458, corr)
    61                                                 plt.xlabel("Correlation speed, m/s")
    62                                                 plt.ylabel("Correlation Signal")
    63                                                 plt.show()
    64                                         
    65   2781.6 MiB      0.0 MiB           1       z_peak = lag[np.where(corr==np.max(corr))][0]
    66   2781.6 MiB      0.0 MiB           1       calculate_velocity = z_peak * 299792458
    67   2781.6 MiB      0.0 MiB           1       speed_arr.append(calculate_velocity)
    68   2781.6 MiB      0.0 MiB           1       n = 15 * 1000 # points to the left or right of correlation maximum
    69   2781.6 MiB      0.0 MiB           1       index_peak = np.where(corr == np.amax(corr))[0][0]
    70   2781.6 MiB      0.0 MiB           1       peak_lags = lag[index_peak-n:index_peak+n+1].value
    71   2781.6 MiB      0.0 MiB           1       peak_vals = corr[index_peak-n:index_peak+n+1].value
    72   2781.6 MiB      0.0 MiB           1       p = np.polyfit(peak_lags, peak_vals, deg=2)
    73   2781.6 MiB      0.0 MiB           1       roots = np.roots(p)
    74   2781.6 MiB      0.0 MiB           1       v_fit = np.mean(roots) # maximum lies at mid point between roots
    75   2781.6 MiB      0.0 MiB           1       z = v_fit * 299792458 
    76                                         
    77   2781.6 MiB      0.0 MiB           1       if plot:
    78                                                 plt.scatter(peak_lags * 299792458, peak_vals, label='data')
    79                                                 plt.plot(peak_lags * 299792458, np.polyval(p, peak_lags),
    80                                                          linewidth=0.5, label='fit')
    81                                                 plt.xlabel(lag.unit)
    82                                                 plt.legend()
    83                                                 plt.title('Fit to correlation peak')
    84                                                 plt.show()
    85                                         
    86                                             # Error count part
    87   2781.6 MiB      0.0 MiB           1       sigma_t = np.std(template_flux)
    88   2781.6 MiB      0.0 MiB           1       sigma_g = np.std(spectrum_flux)
    89   2781.6 MiB      0.0 MiB           1       Rt = np.sqrt(np.mean(template_flux**2))
    90   2781.6 MiB      0.0 MiB           1       Rg = np.sqrt(np.mean(spectrum_flux**2))
    91   2781.6 MiB      0.0 MiB           1       sigma =  (1/len(template_flux)) * (sigma_t**2 / Rt**2 + sigma_g**2 / Rg**2) ** 0.5
    92                                             # A is cross-correlation peak intens
    93                                             # THIS PEACE OF SHIT
    94                                             # Calculate velocity error
    95                                             # Moiseev error counting
    96                                             # Optimization correlation peak with gauss function
    97                                             # For this, need to cut-off some lenght of arrray
    98                                             # TO DO: add cuts for multiply peaks fitting.
    99                                             # cut of template-template correlation:
   100   2781.6 MiB      0.0 MiB           1       wings_t = 50 * 1000  # in meters. 
   101   2781.6 MiB      0.0 MiB           1       autocorr_crop = np.where((lag_template*299792458 >= -wings_t) & (lag_template*299792458 <= wings_t))
   102   2781.6 MiB      0.0 MiB           1       corr_template = corr_template[autocorr_crop]
   103   2734.4 MiB    -47.2 MiB           1       lag_template = lag_template[autocorr_crop]
   104                                         
   105   2734.4 MiB      0.0 MiB           1       initial_guess = [max(corr_template), 0, 1, 0.90] # Initial guess for template-template correlation
   106   2734.4 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   107   2734.4 MiB      0.0 MiB           1                                          lag_template*299792458, corr_template,
   108   2734.4 MiB      0.0 MiB           1                                          p0=initial_guess)
   109                                         
   110   2734.4 MiB      0.0 MiB           1       fit_sigma_t = fit_params[2]
   111   2734.4 MiB      0.0 MiB           1       if plot:
   112                                                 plt.plot(lag_template*299792458, gaussian_function(lag_template*299792458,
   113                                                                                                    *fit_params), 'r-', label='fit')
   114                                                 plt.plot(lag_template*299792458, corr_template)
   115                                                 plt.xlabel("Correlation speed, m/s")
   116                                                 plt.ylabel("Correlation Signal")
   117                                                 plt.show()
   118                                         
   119                                         
   120                                             # cut-off observed-template correlation
   121   2734.4 MiB      0.0 MiB           1       corr_crop = np.where((lag*299792458 >= z-wings_t) & (lag*299792458<= z+wings_t))
   122   2734.4 MiB      0.0 MiB           1       corr = corr[corr_crop]
   123   2734.4 MiB      0.0 MiB           1       lag = lag[corr_crop]
   124                                         
   125   2734.4 MiB      0.0 MiB           1       initial_guess = [max(corr), z, 3000, 0.96]
   126   2734.4 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   127   2734.4 MiB      0.0 MiB           1                                          peak_lags*299792458, peak_vals,
   128   2734.4 MiB      0.0 MiB           1                                          p0=initial_guess)
   129   2734.4 MiB      0.0 MiB           1       fit_sigma = fit_params[2]
   130   2734.4 MiB      0.0 MiB           1       if plot:
   131                                                 plt.plot(lag*299792458, gaussian_function(lag*299792458, *fit_params), 'r-', label='fit')
   132                                                 plt.plot(lag*299792458, corr)
   133                                                 plt.xlabel("Correlation speed, m/s")
   134                                                 plt.ylabel("Correlation Signal")
   135                                                 plt.show()
   136   2734.4 MiB      0.0 MiB           1       z_err = abs(sigma**2 - sigma_t**2)
   137   2734.4 MiB      0.0 MiB           1       z_err = z_err**0.5 
   138                                             
   139   2734.4 MiB      0.0 MiB           1       print(f"Direct calculated velocity is: {calculate_velocity} m/s, sigma gauss: {z_err} m/s, sigma: {sigma*299792458} m/s")
   140                                         
   141   2734.4 MiB      0.0 MiB           1       return calculate_velocity, z, z_err, sigma*299792458


SN is 103
Direct calculated velocity is: 23.98332200543526 m/s, sigma gauss: 0.1987752696171579 m/s, sigma: 31.9999790183709 m/s
Filename: /home/lambda/code/synth_spectrum/velocity.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16   2687.2 MiB   2687.2 MiB           1   @profile
    17                                         def find_velocity(spectrum: list, template: list, inter: list, mult: int):
    18   2687.2 MiB      0.0 MiB           1       plot = False
    19   2687.2 MiB      0.0 MiB           1       spectrum_ang = spectrum[0]
    20   2687.2 MiB      0.0 MiB           1       spectrum_flux = spectrum[1]
    21   2687.2 MiB      0.0 MiB           1       template_ang = template[0]
    22   2687.2 MiB      0.0 MiB           1       template_flux = template[1]
    23   3157.0 MiB    469.9 MiB           1       spectrum_ang, spectrum_flux = increese_resolution(spectrum, mult)
    24   3627.1 MiB    470.1 MiB           1       template_ang, template_flux = increese_resolution(template, mult)
    25                                         
    26   3627.1 MiB      0.0 MiB           1       aa_start = inter[0]
    27   3627.1 MiB      0.0 MiB           1       aa_end = inter[1]
    28                                         
    29   3627.1 MiB      0.0 MiB           1       obs_crop = np.where((spectrum_ang >= aa_start) & (spectrum_ang <= aa_end))
    30   3627.1 MiB      0.0 MiB           1       template_crop = np.where((template_ang >= aa_start) & (template_ang <= aa_end))
    31                                         
    32   3392.1 MiB   -235.0 MiB           1       spectrum_ang = spectrum_ang[obs_crop]
    33   3157.1 MiB   -235.0 MiB           1       spectrum_flux = spectrum_flux[obs_crop]
    34   2922.1 MiB   -235.0 MiB           1       template_ang = template_ang[template_crop]
    35   2687.2 MiB   -235.0 MiB           1       template_flux = template_flux[template_crop]
    36                                         
    37   2687.2 MiB      0.0 MiB           1       flux_unit = u.Unit('erg s^-1 cm^-2 AA^-1')
    38   2687.2 MiB      0.0 MiB     3000010       unc = [10e-10 for x in range(len(spectrum_flux))]
    39   2687.2 MiB      0.0 MiB     3000013       unc_t = [10e-10 for x in range(len(template_flux))]
    40                                         
    41   2687.2 MiB      0.0 MiB           1       speed_arr = []  # for speed calculate in multiply approach
    42                                         
    43   2687.2 MiB      0.0 MiB           2       template = Spectrum1D(spectral_axis=template_ang*u.AA, 
    44   2687.2 MiB      0.0 MiB           1                             flux=template_flux*flux_unit,
    45   2687.2 MiB      0.0 MiB           1                             uncertainty=StdDevUncertainty(unc_t))
    46   2687.2 MiB      0.0 MiB           2       observed = Spectrum1D(spectral_axis=spectrum_ang*u.AA,
    47   2687.2 MiB      0.0 MiB           1                             flux=spectrum_flux*flux_unit,
    48   2687.2 MiB      0.0 MiB           1                             uncertainty=StdDevUncertainty(unc))
    49   3041.5 MiB    354.4 MiB           2       corr, lag = correlation.template_correlate(observed, template,
    50   2687.2 MiB      0.0 MiB           1                                                  lag_units=u.one, method="fft")
    51   2994.3 MiB    -47.2 MiB           1       corr = (corr - np.min(corr)) / (np.max(corr) - np.min(corr))  # normalize correlation
    52                                         
    53                                             # autocorrelation part. needs for error estimation
    54   3206.8 MiB    212.5 MiB           2       corr_template, lag_template = correlation.template_correlate(template,
    55   2994.3 MiB      0.0 MiB           1                                                                    template,
    56   2994.3 MiB      0.0 MiB           1                                                                    lag_units=u.one,
    57   2994.3 MiB      0.0 MiB           1                                                                    method="fft")
    58   3159.6 MiB    -47.3 MiB           1       corr_template = (corr_template - np.min(corr_template)) / (np.max(corr_template) - np.min(corr_template)) 
    59   3159.6 MiB      0.0 MiB           1       if plot:
    60                                                 plt.plot(lag*299792458, corr)
    61                                                 plt.xlabel("Correlation speed, m/s")
    62                                                 plt.ylabel("Correlation Signal")
    63                                                 plt.show()
    64                                         
    65   3159.6 MiB      0.0 MiB           1       z_peak = lag[np.where(corr==np.max(corr))][0]
    66   3159.6 MiB      0.0 MiB           1       calculate_velocity = z_peak * 299792458
    67   3159.6 MiB      0.0 MiB           1       speed_arr.append(calculate_velocity)
    68   3159.6 MiB      0.0 MiB           1       n = 15 * 1000 # points to the left or right of correlation maximum
    69   3159.6 MiB      0.0 MiB           1       index_peak = np.where(corr == np.amax(corr))[0][0]
    70   3159.6 MiB      0.0 MiB           1       peak_lags = lag[index_peak-n:index_peak+n+1].value
    71   3159.6 MiB      0.0 MiB           1       peak_vals = corr[index_peak-n:index_peak+n+1].value
    72   3159.6 MiB      0.0 MiB           1       p = np.polyfit(peak_lags, peak_vals, deg=2)
    73   3159.6 MiB      0.0 MiB           1       roots = np.roots(p)
    74   3159.6 MiB      0.0 MiB           1       v_fit = np.mean(roots) # maximum lies at mid point between roots
    75   3159.6 MiB      0.0 MiB           1       z = v_fit * 299792458 
    76                                         
    77   3159.6 MiB      0.0 MiB           1       if plot:
    78                                                 plt.scatter(peak_lags * 299792458, peak_vals, label='data')
    79                                                 plt.plot(peak_lags * 299792458, np.polyval(p, peak_lags),
    80                                                          linewidth=0.5, label='fit')
    81                                                 plt.xlabel(lag.unit)
    82                                                 plt.legend()
    83                                                 plt.title('Fit to correlation peak')
    84                                                 plt.show()
    85                                         
    86                                             # Error count part
    87   3159.6 MiB      0.0 MiB           1       sigma_t = np.std(template_flux)
    88   3159.6 MiB      0.0 MiB           1       sigma_g = np.std(spectrum_flux)
    89   3159.6 MiB      0.0 MiB           1       Rt = np.sqrt(np.mean(template_flux**2))
    90   3159.6 MiB      0.0 MiB           1       Rg = np.sqrt(np.mean(spectrum_flux**2))
    91   3159.6 MiB      0.0 MiB           1       sigma =  (1/len(template_flux)) * (sigma_t**2 / Rt**2 + sigma_g**2 / Rg**2) ** 0.5
    92                                             # A is cross-correlation peak intens
    93                                             # THIS PEACE OF SHIT
    94                                             # Calculate velocity error
    95                                             # Moiseev error counting
    96                                             # Optimization correlation peak with gauss function
    97                                             # For this, need to cut-off some lenght of arrray
    98                                             # TO DO: add cuts for multiply peaks fitting.
    99                                             # cut of template-template correlation:
   100   3159.6 MiB      0.0 MiB           1       wings_t = 50 * 1000  # in meters. 
   101   3159.6 MiB      0.0 MiB           1       autocorr_crop = np.where((lag_template*299792458 >= -wings_t) & (lag_template*299792458 <= wings_t))
   102   3159.6 MiB      0.0 MiB           1       corr_template = corr_template[autocorr_crop]
   103   3112.5 MiB    -47.1 MiB           1       lag_template = lag_template[autocorr_crop]
   104                                         
   105   3112.5 MiB      0.0 MiB           1       initial_guess = [max(corr_template), 0, 1, 0.90] # Initial guess for template-template correlation
   106   3112.5 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   107   3112.5 MiB      0.0 MiB           1                                          lag_template*299792458, corr_template,
   108   3112.5 MiB      0.0 MiB           1                                          p0=initial_guess)
   109                                         
   110   3112.5 MiB      0.0 MiB           1       fit_sigma_t = fit_params[2]
   111   3112.5 MiB      0.0 MiB           1       if plot:
   112                                                 plt.plot(lag_template*299792458, gaussian_function(lag_template*299792458,
   113                                                                                                    *fit_params), 'r-', label='fit')
   114                                                 plt.plot(lag_template*299792458, corr_template)
   115                                                 plt.xlabel("Correlation speed, m/s")
   116                                                 plt.ylabel("Correlation Signal")
   117                                                 plt.show()
   118                                         
   119                                         
   120                                             # cut-off observed-template correlation
   121   3112.5 MiB      0.0 MiB           1       corr_crop = np.where((lag*299792458 >= z-wings_t) & (lag*299792458<= z+wings_t))
   122   3112.5 MiB      0.0 MiB           1       corr = corr[corr_crop]
   123   3112.5 MiB      0.0 MiB           1       lag = lag[corr_crop]
   124                                         
   125   3112.5 MiB      0.0 MiB           1       initial_guess = [max(corr), z, 3000, 0.96]
   126   3112.5 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   127   3112.5 MiB      0.0 MiB           1                                          peak_lags*299792458, peak_vals,
   128   3112.5 MiB      0.0 MiB           1                                          p0=initial_guess)
   129   3112.5 MiB      0.0 MiB           1       fit_sigma = fit_params[2]
   130   3112.5 MiB      0.0 MiB           1       if plot:
   131                                                 plt.plot(lag*299792458, gaussian_function(lag*299792458, *fit_params), 'r-', label='fit')
   132                                                 plt.plot(lag*299792458, corr)
   133                                                 plt.xlabel("Correlation speed, m/s")
   134                                                 plt.ylabel("Correlation Signal")
   135                                                 plt.show()
   136   3112.5 MiB      0.0 MiB           1       z_err = abs(sigma**2 - sigma_t**2)
   137   3112.5 MiB      0.0 MiB           1       z_err = z_err**0.5 
   138                                             
   139   3112.5 MiB      0.0 MiB           1       print(f"Direct calculated velocity is: {calculate_velocity} m/s, sigma gauss: {z_err} m/s, sigma: {sigma*299792458} m/s")
   140                                         
   141   3112.5 MiB      0.0 MiB           1       return calculate_velocity, z, z_err, sigma*299792458


SN is 104
Direct calculated velocity is: 17.987491321016375 m/s, sigma gauss: 0.1987752696171579 m/s, sigma: 32.0013166246868 m/s
Filename: /home/lambda/code/synth_spectrum/velocity.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16   3065.2 MiB   3065.2 MiB           1   @profile
    17                                         def find_velocity(spectrum: list, template: list, inter: list, mult: int):
    18   3065.2 MiB      0.0 MiB           1       plot = False
    19   3065.2 MiB      0.0 MiB           1       spectrum_ang = spectrum[0]
    20   3065.2 MiB      0.0 MiB           1       spectrum_flux = spectrum[1]
    21   3065.2 MiB      0.0 MiB           1       template_ang = template[0]
    22   3065.2 MiB      0.0 MiB           1       template_flux = template[1]
    23   3535.1 MiB    469.9 MiB           1       spectrum_ang, spectrum_flux = increese_resolution(spectrum, mult)
    24   4005.2 MiB    470.1 MiB           1       template_ang, template_flux = increese_resolution(template, mult)
    25                                         
    26   4005.2 MiB      0.0 MiB           1       aa_start = inter[0]
    27   4005.2 MiB      0.0 MiB           1       aa_end = inter[1]
    28                                         
    29   4005.2 MiB      0.0 MiB           1       obs_crop = np.where((spectrum_ang >= aa_start) & (spectrum_ang <= aa_end))
    30   4005.2 MiB      0.0 MiB           1       template_crop = np.where((template_ang >= aa_start) & (template_ang <= aa_end))
    31                                         
    32   3770.2 MiB   -235.0 MiB           1       spectrum_ang = spectrum_ang[obs_crop]
    33   3535.2 MiB   -235.0 MiB           1       spectrum_flux = spectrum_flux[obs_crop]
    34   3300.2 MiB   -235.0 MiB           1       template_ang = template_ang[template_crop]
    35   3065.2 MiB   -235.0 MiB           1       template_flux = template_flux[template_crop]
    36                                         
    37   3065.2 MiB      0.0 MiB           1       flux_unit = u.Unit('erg s^-1 cm^-2 AA^-1')
    38   3065.2 MiB      0.0 MiB     3000010       unc = [10e-10 for x in range(len(spectrum_flux))]
    39   3065.2 MiB      0.0 MiB     3000013       unc_t = [10e-10 for x in range(len(template_flux))]
    40                                         
    41   3065.2 MiB      0.0 MiB           1       speed_arr = []  # for speed calculate in multiply approach
    42                                         
    43   3065.2 MiB      0.0 MiB           2       template = Spectrum1D(spectral_axis=template_ang*u.AA, 
    44   3065.2 MiB      0.0 MiB           1                             flux=template_flux*flux_unit,
    45   3065.2 MiB      0.0 MiB           1                             uncertainty=StdDevUncertainty(unc_t))
    46   3065.2 MiB      0.0 MiB           2       observed = Spectrum1D(spectral_axis=spectrum_ang*u.AA,
    47   3065.2 MiB      0.0 MiB           1                             flux=spectrum_flux*flux_unit,
    48   3065.2 MiB      0.0 MiB           1                             uncertainty=StdDevUncertainty(unc))
    49   3065.2 MiB   -141.6 MiB           2       corr, lag = correlation.template_correlate(observed, template,
    50   3065.2 MiB      0.0 MiB           1                                                  lag_units=u.one, method="fft")
    51   2923.6 MiB   -141.6 MiB           1       corr = (corr - np.min(corr)) / (np.max(corr) - np.min(corr))  # normalize correlation
    52                                         
    53                                             # autocorrelation part. needs for error estimation
    54   2923.6 MiB      0.0 MiB           2       corr_template, lag_template = correlation.template_correlate(template,
    55   2923.6 MiB      0.0 MiB           1                                                                    template,
    56   2923.6 MiB      0.0 MiB           1                                                                    lag_units=u.one,
    57   2923.6 MiB      0.0 MiB           1                                                                    method="fft")
    58   2923.6 MiB      0.0 MiB           1       corr_template = (corr_template - np.min(corr_template)) / (np.max(corr_template) - np.min(corr_template)) 
    59   2923.6 MiB      0.0 MiB           1       if plot:
    60                                                 plt.plot(lag*299792458, corr)
    61                                                 plt.xlabel("Correlation speed, m/s")
    62                                                 plt.ylabel("Correlation Signal")
    63                                                 plt.show()
    64                                         
    65   2923.6 MiB      0.0 MiB           1       z_peak = lag[np.where(corr==np.max(corr))][0]
    66   2923.6 MiB      0.0 MiB           1       calculate_velocity = z_peak * 299792458
    67   2923.6 MiB      0.0 MiB           1       speed_arr.append(calculate_velocity)
    68   2923.6 MiB      0.0 MiB           1       n = 15 * 1000 # points to the left or right of correlation maximum
    69   2923.6 MiB      0.0 MiB           1       index_peak = np.where(corr == np.amax(corr))[0][0]
    70   2923.6 MiB      0.0 MiB           1       peak_lags = lag[index_peak-n:index_peak+n+1].value
    71   2923.6 MiB      0.0 MiB           1       peak_vals = corr[index_peak-n:index_peak+n+1].value
    72   2923.6 MiB      0.0 MiB           1       p = np.polyfit(peak_lags, peak_vals, deg=2)
    73   2923.6 MiB      0.0 MiB           1       roots = np.roots(p)
    74   2923.6 MiB      0.0 MiB           1       v_fit = np.mean(roots) # maximum lies at mid point between roots
    75   2923.6 MiB      0.0 MiB           1       z = v_fit * 299792458 
    76                                         
    77   2923.6 MiB      0.0 MiB           1       if plot:
    78                                                 plt.scatter(peak_lags * 299792458, peak_vals, label='data')
    79                                                 plt.plot(peak_lags * 299792458, np.polyval(p, peak_lags),
    80                                                          linewidth=0.5, label='fit')
    81                                                 plt.xlabel(lag.unit)
    82                                                 plt.legend()
    83                                                 plt.title('Fit to correlation peak')
    84                                                 plt.show()
    85                                         
    86                                             # Error count part
    87   2923.6 MiB      0.0 MiB           1       sigma_t = np.std(template_flux)
    88   2923.6 MiB      0.0 MiB           1       sigma_g = np.std(spectrum_flux)
    89   2923.6 MiB      0.0 MiB           1       Rt = np.sqrt(np.mean(template_flux**2))
    90   2923.6 MiB      0.0 MiB           1       Rg = np.sqrt(np.mean(spectrum_flux**2))
    91   2923.6 MiB      0.0 MiB           1       sigma =  (1/len(template_flux)) * (sigma_t**2 / Rt**2 + sigma_g**2 / Rg**2) ** 0.5
    92                                             # A is cross-correlation peak intens
    93                                             # THIS PEACE OF SHIT
    94                                             # Calculate velocity error
    95                                             # Moiseev error counting
    96                                             # Optimization correlation peak with gauss function
    97                                             # For this, need to cut-off some lenght of arrray
    98                                             # TO DO: add cuts for multiply peaks fitting.
    99                                             # cut of template-template correlation:
   100   2923.6 MiB      0.0 MiB           1       wings_t = 50 * 1000  # in meters. 
   101   2923.6 MiB      0.0 MiB           1       autocorr_crop = np.where((lag_template*299792458 >= -wings_t) & (lag_template*299792458 <= wings_t))
   102   2923.6 MiB      0.0 MiB           1       corr_template = corr_template[autocorr_crop]
   103   2923.6 MiB      0.0 MiB           1       lag_template = lag_template[autocorr_crop]
   104                                         
   105   2923.6 MiB      0.0 MiB           1       initial_guess = [max(corr_template), 0, 1, 0.90] # Initial guess for template-template correlation
   106   2923.6 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   107   2923.6 MiB      0.0 MiB           1                                          lag_template*299792458, corr_template,
   108   2923.6 MiB      0.0 MiB           1                                          p0=initial_guess)
   109                                         
   110   2923.6 MiB      0.0 MiB           1       fit_sigma_t = fit_params[2]
   111   2923.6 MiB      0.0 MiB           1       if plot:
   112                                                 plt.plot(lag_template*299792458, gaussian_function(lag_template*299792458,
   113                                                                                                    *fit_params), 'r-', label='fit')
   114                                                 plt.plot(lag_template*299792458, corr_template)
   115                                                 plt.xlabel("Correlation speed, m/s")
   116                                                 plt.ylabel("Correlation Signal")
   117                                                 plt.show()
   118                                         
   119                                         
   120                                             # cut-off observed-template correlation
   121   2923.6 MiB      0.0 MiB           1       corr_crop = np.where((lag*299792458 >= z-wings_t) & (lag*299792458<= z+wings_t))
   122   2923.6 MiB      0.0 MiB           1       corr = corr[corr_crop]
   123   2923.6 MiB      0.0 MiB           1       lag = lag[corr_crop]
   124                                         
   125   2923.6 MiB      0.0 MiB           1       initial_guess = [max(corr), z, 3000, 0.96]
   126   2923.6 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   127   2923.6 MiB      0.0 MiB           1                                          peak_lags*299792458, peak_vals,
   128   2923.6 MiB      0.0 MiB           1                                          p0=initial_guess)
   129   2923.6 MiB      0.0 MiB           1       fit_sigma = fit_params[2]
   130   2923.6 MiB      0.0 MiB           1       if plot:
   131                                                 plt.plot(lag*299792458, gaussian_function(lag*299792458, *fit_params), 'r-', label='fit')
   132                                                 plt.plot(lag*299792458, corr)
   133                                                 plt.xlabel("Correlation speed, m/s")
   134                                                 plt.ylabel("Correlation Signal")
   135                                                 plt.show()
   136   2923.6 MiB      0.0 MiB           1       z_err = abs(sigma**2 - sigma_t**2)
   137   2923.6 MiB      0.0 MiB           1       z_err = z_err**0.5 
   138                                             
   139   2923.6 MiB      0.0 MiB           1       print(f"Direct calculated velocity is: {calculate_velocity} m/s, sigma gauss: {z_err} m/s, sigma: {sigma*299792458} m/s")
   140                                         
   141   2923.6 MiB      0.0 MiB           1       return calculate_velocity, z, z_err, sigma*299792458


SN is 105
Direct calculated velocity is: 23.98332200543526 m/s, sigma gauss: 0.1987752696171579 m/s, sigma: 32.00071594788208 m/s
Filename: /home/lambda/code/synth_spectrum/velocity.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16   2923.6 MiB   2923.6 MiB           1   @profile
    17                                         def find_velocity(spectrum: list, template: list, inter: list, mult: int):
    18   2923.6 MiB      0.0 MiB           1       plot = False
    19   2923.6 MiB      0.0 MiB           1       spectrum_ang = spectrum[0]
    20   2923.6 MiB      0.0 MiB           1       spectrum_flux = spectrum[1]
    21   2923.6 MiB      0.0 MiB           1       template_ang = template[0]
    22   2923.6 MiB      0.0 MiB           1       template_flux = template[1]
    23   2923.6 MiB      0.0 MiB           1       spectrum_ang, spectrum_flux = increese_resolution(spectrum, mult)
    24   3158.5 MiB    234.9 MiB           1       template_ang, template_flux = increese_resolution(template, mult)
    25                                         
    26   3158.5 MiB      0.0 MiB           1       aa_start = inter[0]
    27   3158.5 MiB      0.0 MiB           1       aa_end = inter[1]
    28                                         
    29   3158.5 MiB      0.0 MiB           1       obs_crop = np.where((spectrum_ang >= aa_start) & (spectrum_ang <= aa_end))
    30   3158.5 MiB      0.0 MiB           1       template_crop = np.where((template_ang >= aa_start) & (template_ang <= aa_end))
    31                                         
    32   3158.5 MiB      0.0 MiB           1       spectrum_ang = spectrum_ang[obs_crop]
    33   3158.5 MiB      0.0 MiB           1       spectrum_flux = spectrum_flux[obs_crop]
    34   3158.5 MiB      0.0 MiB           1       template_ang = template_ang[template_crop]
    35   2923.6 MiB   -234.9 MiB           1       template_flux = template_flux[template_crop]
    36                                         
    37   2923.6 MiB      0.0 MiB           1       flux_unit = u.Unit('erg s^-1 cm^-2 AA^-1')
    38   2923.6 MiB      0.0 MiB     3000010       unc = [10e-10 for x in range(len(spectrum_flux))]
    39   2923.6 MiB      0.0 MiB     3000013       unc_t = [10e-10 for x in range(len(template_flux))]
    40                                         
    41   2923.6 MiB      0.0 MiB           1       speed_arr = []  # for speed calculate in multiply approach
    42                                         
    43   2923.6 MiB      0.0 MiB           2       template = Spectrum1D(spectral_axis=template_ang*u.AA, 
    44   2923.6 MiB      0.0 MiB           1                             flux=template_flux*flux_unit,
    45   2923.6 MiB      0.0 MiB           1                             uncertainty=StdDevUncertainty(unc_t))
    46   2923.6 MiB      0.0 MiB           2       observed = Spectrum1D(spectral_axis=spectrum_ang*u.AA,
    47   2923.6 MiB      0.0 MiB           1                             flux=spectrum_flux*flux_unit,
    48   2923.6 MiB      0.0 MiB           1                             uncertainty=StdDevUncertainty(unc))
    49   2923.6 MiB      0.0 MiB           2       corr, lag = correlation.template_correlate(observed, template,
    50   2923.6 MiB      0.0 MiB           1                                                  lag_units=u.one, method="fft")
    51   2923.6 MiB      0.0 MiB           1       corr = (corr - np.min(corr)) / (np.max(corr) - np.min(corr))  # normalize correlation
    52                                         
    53                                             # autocorrelation part. needs for error estimation
    54   2923.6 MiB      0.0 MiB           2       corr_template, lag_template = correlation.template_correlate(template,
    55   2923.6 MiB      0.0 MiB           1                                                                    template,
    56   2923.6 MiB      0.0 MiB           1                                                                    lag_units=u.one,
    57   2923.6 MiB      0.0 MiB           1                                                                    method="fft")
    58   2923.6 MiB      0.0 MiB           1       corr_template = (corr_template - np.min(corr_template)) / (np.max(corr_template) - np.min(corr_template)) 
    59   2923.6 MiB      0.0 MiB           1       if plot:
    60                                                 plt.plot(lag*299792458, corr)
    61                                                 plt.xlabel("Correlation speed, m/s")
    62                                                 plt.ylabel("Correlation Signal")
    63                                                 plt.show()
    64                                         
    65   2923.6 MiB      0.0 MiB           1       z_peak = lag[np.where(corr==np.max(corr))][0]
    66   2923.6 MiB      0.0 MiB           1       calculate_velocity = z_peak * 299792458
    67   2923.6 MiB      0.0 MiB           1       speed_arr.append(calculate_velocity)
    68   2923.6 MiB      0.0 MiB           1       n = 15 * 1000 # points to the left or right of correlation maximum
    69   2923.6 MiB      0.0 MiB           1       index_peak = np.where(corr == np.amax(corr))[0][0]
    70   2923.6 MiB      0.0 MiB           1       peak_lags = lag[index_peak-n:index_peak+n+1].value
    71   2923.6 MiB      0.0 MiB           1       peak_vals = corr[index_peak-n:index_peak+n+1].value
    72   2923.6 MiB      0.0 MiB           1       p = np.polyfit(peak_lags, peak_vals, deg=2)
    73   2923.6 MiB      0.0 MiB           1       roots = np.roots(p)
    74   2923.6 MiB      0.0 MiB           1       v_fit = np.mean(roots) # maximum lies at mid point between roots
    75   2923.6 MiB      0.0 MiB           1       z = v_fit * 299792458 
    76                                         
    77   2923.6 MiB      0.0 MiB           1       if plot:
    78                                                 plt.scatter(peak_lags * 299792458, peak_vals, label='data')
    79                                                 plt.plot(peak_lags * 299792458, np.polyval(p, peak_lags),
    80                                                          linewidth=0.5, label='fit')
    81                                                 plt.xlabel(lag.unit)
    82                                                 plt.legend()
    83                                                 plt.title('Fit to correlation peak')
    84                                                 plt.show()
    85                                         
    86                                             # Error count part
    87   2923.6 MiB      0.0 MiB           1       sigma_t = np.std(template_flux)
    88   2923.6 MiB      0.0 MiB           1       sigma_g = np.std(spectrum_flux)
    89   2923.6 MiB      0.0 MiB           1       Rt = np.sqrt(np.mean(template_flux**2))
    90   2923.6 MiB      0.0 MiB           1       Rg = np.sqrt(np.mean(spectrum_flux**2))
    91   2923.6 MiB      0.0 MiB           1       sigma =  (1/len(template_flux)) * (sigma_t**2 / Rt**2 + sigma_g**2 / Rg**2) ** 0.5
    92                                             # A is cross-correlation peak intens
    93                                             # THIS PEACE OF SHIT
    94                                             # Calculate velocity error
    95                                             # Moiseev error counting
    96                                             # Optimization correlation peak with gauss function
    97                                             # For this, need to cut-off some lenght of arrray
    98                                             # TO DO: add cuts for multiply peaks fitting.
    99                                             # cut of template-template correlation:
   100   2923.6 MiB      0.0 MiB           1       wings_t = 50 * 1000  # in meters. 
   101   2923.6 MiB      0.0 MiB           1       autocorr_crop = np.where((lag_template*299792458 >= -wings_t) & (lag_template*299792458 <= wings_t))
   102   2923.6 MiB      0.0 MiB           1       corr_template = corr_template[autocorr_crop]
   103   2923.6 MiB      0.0 MiB           1       lag_template = lag_template[autocorr_crop]
   104                                         
   105   2923.6 MiB      0.0 MiB           1       initial_guess = [max(corr_template), 0, 1, 0.90] # Initial guess for template-template correlation
   106   2923.6 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   107   2923.6 MiB      0.0 MiB           1                                          lag_template*299792458, corr_template,
   108   2923.6 MiB      0.0 MiB           1                                          p0=initial_guess)
   109                                         
   110   2923.6 MiB      0.0 MiB           1       fit_sigma_t = fit_params[2]
   111   2923.6 MiB      0.0 MiB           1       if plot:
   112                                                 plt.plot(lag_template*299792458, gaussian_function(lag_template*299792458,
   113                                                                                                    *fit_params), 'r-', label='fit')
   114                                                 plt.plot(lag_template*299792458, corr_template)
   115                                                 plt.xlabel("Correlation speed, m/s")
   116                                                 plt.ylabel("Correlation Signal")
   117                                                 plt.show()
   118                                         
   119                                         
   120                                             # cut-off observed-template correlation
   121   2923.6 MiB      0.0 MiB           1       corr_crop = np.where((lag*299792458 >= z-wings_t) & (lag*299792458<= z+wings_t))
   122   2923.6 MiB      0.0 MiB           1       corr = corr[corr_crop]
   123   2923.6 MiB      0.0 MiB           1       lag = lag[corr_crop]
   124                                         
   125   2923.6 MiB      0.0 MiB           1       initial_guess = [max(corr), z, 3000, 0.96]
   126   2923.6 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   127   2923.6 MiB      0.0 MiB           1                                          peak_lags*299792458, peak_vals,
   128   2923.6 MiB      0.0 MiB           1                                          p0=initial_guess)
   129   2923.6 MiB      0.0 MiB           1       fit_sigma = fit_params[2]
   130   2923.6 MiB      0.0 MiB           1       if plot:
   131                                                 plt.plot(lag*299792458, gaussian_function(lag*299792458, *fit_params), 'r-', label='fit')
   132                                                 plt.plot(lag*299792458, corr)
   133                                                 plt.xlabel("Correlation speed, m/s")
   134                                                 plt.ylabel("Correlation Signal")
   135                                                 plt.show()
   136   2923.6 MiB      0.0 MiB           1       z_err = abs(sigma**2 - sigma_t**2)
   137   2923.6 MiB      0.0 MiB           1       z_err = z_err**0.5 
   138                                             
   139   2923.6 MiB      0.0 MiB           1       print(f"Direct calculated velocity is: {calculate_velocity} m/s, sigma gauss: {z_err} m/s, sigma: {sigma*299792458} m/s")
   140                                         
   141   2923.6 MiB      0.0 MiB           1       return calculate_velocity, z, z_err, sigma*299792458


SN is 106
Direct calculated velocity is: 23.98332200543526 m/s, sigma gauss: 0.1987752696171579 m/s, sigma: 32.00629500510687 m/s
Filename: /home/lambda/code/synth_spectrum/velocity.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16   2923.6 MiB   2923.6 MiB           1   @profile
    17                                         def find_velocity(spectrum: list, template: list, inter: list, mult: int):
    18   2923.6 MiB      0.0 MiB           1       plot = False
    19   2923.6 MiB      0.0 MiB           1       spectrum_ang = spectrum[0]
    20   2923.6 MiB      0.0 MiB           1       spectrum_flux = spectrum[1]
    21   2923.6 MiB      0.0 MiB           1       template_ang = template[0]
    22   2923.6 MiB      0.0 MiB           1       template_flux = template[1]
    23   2923.6 MiB      0.0 MiB           1       spectrum_ang, spectrum_flux = increese_resolution(spectrum, mult)
    24   3158.5 MiB    234.9 MiB           1       template_ang, template_flux = increese_resolution(template, mult)
    25                                         
    26   3158.5 MiB      0.0 MiB           1       aa_start = inter[0]
    27   3158.5 MiB      0.0 MiB           1       aa_end = inter[1]
    28                                         
    29   3158.5 MiB      0.0 MiB           1       obs_crop = np.where((spectrum_ang >= aa_start) & (spectrum_ang <= aa_end))
    30   3158.5 MiB      0.0 MiB           1       template_crop = np.where((template_ang >= aa_start) & (template_ang <= aa_end))
    31                                         
    32   3158.5 MiB      0.0 MiB           1       spectrum_ang = spectrum_ang[obs_crop]
    33   3158.5 MiB      0.0 MiB           1       spectrum_flux = spectrum_flux[obs_crop]
    34   3158.5 MiB      0.0 MiB           1       template_ang = template_ang[template_crop]
    35   2923.6 MiB   -234.9 MiB           1       template_flux = template_flux[template_crop]
    36                                         
    37   2923.6 MiB      0.0 MiB           1       flux_unit = u.Unit('erg s^-1 cm^-2 AA^-1')
    38   2923.6 MiB      0.0 MiB     3000010       unc = [10e-10 for x in range(len(spectrum_flux))]
    39   2923.6 MiB      0.0 MiB     3000013       unc_t = [10e-10 for x in range(len(template_flux))]
    40                                         
    41   2923.6 MiB      0.0 MiB           1       speed_arr = []  # for speed calculate in multiply approach
    42                                         
    43   2923.6 MiB      0.0 MiB           2       template = Spectrum1D(spectral_axis=template_ang*u.AA, 
    44   2923.6 MiB      0.0 MiB           1                             flux=template_flux*flux_unit,
    45   2923.6 MiB      0.0 MiB           1                             uncertainty=StdDevUncertainty(unc_t))
    46   2923.6 MiB      0.0 MiB           2       observed = Spectrum1D(spectral_axis=spectrum_ang*u.AA,
    47   2923.6 MiB      0.0 MiB           1                             flux=spectrum_flux*flux_unit,
    48   2923.6 MiB      0.0 MiB           1                             uncertainty=StdDevUncertainty(unc))
    49   2923.6 MiB      0.0 MiB           2       corr, lag = correlation.template_correlate(observed, template,
    50   2923.6 MiB      0.0 MiB           1                                                  lag_units=u.one, method="fft")
    51   2923.6 MiB      0.0 MiB           1       corr = (corr - np.min(corr)) / (np.max(corr) - np.min(corr))  # normalize correlation
    52                                         
    53                                             # autocorrelation part. needs for error estimation
    54   2947.1 MiB     23.5 MiB           2       corr_template, lag_template = correlation.template_correlate(template,
    55   2923.6 MiB      0.0 MiB           1                                                                    template,
    56   2923.6 MiB      0.0 MiB           1                                                                    lag_units=u.one,
    57   2923.6 MiB      0.0 MiB           1                                                                    method="fft")
    58   2947.1 MiB      0.0 MiB           1       corr_template = (corr_template - np.min(corr_template)) / (np.max(corr_template) - np.min(corr_template)) 
    59   2947.1 MiB      0.0 MiB           1       if plot:
    60                                                 plt.plot(lag*299792458, corr)
    61                                                 plt.xlabel("Correlation speed, m/s")
    62                                                 plt.ylabel("Correlation Signal")
    63                                                 plt.show()
    64                                         
    65   2947.1 MiB      0.0 MiB           1       z_peak = lag[np.where(corr==np.max(corr))][0]
    66   2947.1 MiB      0.0 MiB           1       calculate_velocity = z_peak * 299792458
    67   2947.1 MiB      0.0 MiB           1       speed_arr.append(calculate_velocity)
    68   2947.1 MiB      0.0 MiB           1       n = 15 * 1000 # points to the left or right of correlation maximum
    69   2947.1 MiB      0.0 MiB           1       index_peak = np.where(corr == np.amax(corr))[0][0]
    70   2947.1 MiB      0.0 MiB           1       peak_lags = lag[index_peak-n:index_peak+n+1].value
    71   2947.1 MiB      0.0 MiB           1       peak_vals = corr[index_peak-n:index_peak+n+1].value
    72   2947.1 MiB      0.0 MiB           1       p = np.polyfit(peak_lags, peak_vals, deg=2)
    73   2947.1 MiB      0.0 MiB           1       roots = np.roots(p)
    74   2947.1 MiB      0.0 MiB           1       v_fit = np.mean(roots) # maximum lies at mid point between roots
    75   2947.1 MiB      0.0 MiB           1       z = v_fit * 299792458 
    76                                         
    77   2947.1 MiB      0.0 MiB           1       if plot:
    78                                                 plt.scatter(peak_lags * 299792458, peak_vals, label='data')
    79                                                 plt.plot(peak_lags * 299792458, np.polyval(p, peak_lags),
    80                                                          linewidth=0.5, label='fit')
    81                                                 plt.xlabel(lag.unit)
    82                                                 plt.legend()
    83                                                 plt.title('Fit to correlation peak')
    84                                                 plt.show()
    85                                         
    86                                             # Error count part
    87   2947.1 MiB      0.0 MiB           1       sigma_t = np.std(template_flux)
    88   2947.1 MiB      0.0 MiB           1       sigma_g = np.std(spectrum_flux)
    89   2947.1 MiB      0.0 MiB           1       Rt = np.sqrt(np.mean(template_flux**2))
    90   2947.1 MiB      0.0 MiB           1       Rg = np.sqrt(np.mean(spectrum_flux**2))
    91   2947.1 MiB      0.0 MiB           1       sigma =  (1/len(template_flux)) * (sigma_t**2 / Rt**2 + sigma_g**2 / Rg**2) ** 0.5
    92                                             # A is cross-correlation peak intens
    93                                             # THIS PEACE OF SHIT
    94                                             # Calculate velocity error
    95                                             # Moiseev error counting
    96                                             # Optimization correlation peak with gauss function
    97                                             # For this, need to cut-off some lenght of arrray
    98                                             # TO DO: add cuts for multiply peaks fitting.
    99                                             # cut of template-template correlation:
   100   2947.1 MiB      0.0 MiB           1       wings_t = 50 * 1000  # in meters. 
   101   2947.1 MiB      0.0 MiB           1       autocorr_crop = np.where((lag_template*299792458 >= -wings_t) & (lag_template*299792458 <= wings_t))
   102   2947.1 MiB      0.0 MiB           1       corr_template = corr_template[autocorr_crop]
   103   2947.1 MiB      0.0 MiB           1       lag_template = lag_template[autocorr_crop]
   104                                         
   105   2947.1 MiB      0.0 MiB           1       initial_guess = [max(corr_template), 0, 1, 0.90] # Initial guess for template-template correlation
   106   2947.1 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   107   2947.1 MiB      0.0 MiB           1                                          lag_template*299792458, corr_template,
   108   2947.1 MiB      0.0 MiB           1                                          p0=initial_guess)
   109                                         
   110   2947.1 MiB      0.0 MiB           1       fit_sigma_t = fit_params[2]
   111   2947.1 MiB      0.0 MiB           1       if plot:
   112                                                 plt.plot(lag_template*299792458, gaussian_function(lag_template*299792458,
   113                                                                                                    *fit_params), 'r-', label='fit')
   114                                                 plt.plot(lag_template*299792458, corr_template)
   115                                                 plt.xlabel("Correlation speed, m/s")
   116                                                 plt.ylabel("Correlation Signal")
   117                                                 plt.show()
   118                                         
   119                                         
   120                                             # cut-off observed-template correlation
   121   2947.1 MiB      0.0 MiB           1       corr_crop = np.where((lag*299792458 >= z-wings_t) & (lag*299792458<= z+wings_t))
   122   2947.1 MiB      0.0 MiB           1       corr = corr[corr_crop]
   123   2947.1 MiB      0.0 MiB           1       lag = lag[corr_crop]
   124                                         
   125   2947.1 MiB      0.0 MiB           1       initial_guess = [max(corr), z, 3000, 0.96]
   126   2947.1 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   127   2947.1 MiB      0.0 MiB           1                                          peak_lags*299792458, peak_vals,
   128   2947.1 MiB      0.0 MiB           1                                          p0=initial_guess)
   129   2947.1 MiB      0.0 MiB           1       fit_sigma = fit_params[2]
   130   2947.1 MiB      0.0 MiB           1       if plot:
   131                                                 plt.plot(lag*299792458, gaussian_function(lag*299792458, *fit_params), 'r-', label='fit')
   132                                                 plt.plot(lag*299792458, corr)
   133                                                 plt.xlabel("Correlation speed, m/s")
   134                                                 plt.ylabel("Correlation Signal")
   135                                                 plt.show()
   136   2947.1 MiB      0.0 MiB           1       z_err = abs(sigma**2 - sigma_t**2)
   137   2947.1 MiB      0.0 MiB           1       z_err = z_err**0.5 
   138                                             
   139   2947.1 MiB      0.0 MiB           1       print(f"Direct calculated velocity is: {calculate_velocity} m/s, sigma gauss: {z_err} m/s, sigma: {sigma*299792458} m/s")
   140                                         
   141   2947.1 MiB      0.0 MiB           1       return calculate_velocity, z, z_err, sigma*299792458


SN is 107
Direct calculated velocity is: 23.98332200543526 m/s, sigma gauss: 0.1987752696171579 m/s, sigma: 32.005909622267566 m/s
Filename: /home/lambda/code/synth_spectrum/velocity.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16   2947.1 MiB   2947.1 MiB           1   @profile
    17                                         def find_velocity(spectrum: list, template: list, inter: list, mult: int):
    18   2947.1 MiB      0.0 MiB           1       plot = False
    19   2947.1 MiB      0.0 MiB           1       spectrum_ang = spectrum[0]
    20   2947.1 MiB      0.0 MiB           1       spectrum_flux = spectrum[1]
    21   2947.1 MiB      0.0 MiB           1       template_ang = template[0]
    22   2947.1 MiB      0.0 MiB           1       template_flux = template[1]
    23   2947.1 MiB      0.0 MiB           1       spectrum_ang, spectrum_flux = increese_resolution(spectrum, mult)
    24   3417.0 MiB    469.9 MiB           1       template_ang, template_flux = increese_resolution(template, mult)
    25                                         
    26   3417.0 MiB      0.0 MiB           1       aa_start = inter[0]
    27   3417.0 MiB      0.0 MiB           1       aa_end = inter[1]
    28                                         
    29   3417.0 MiB      0.0 MiB           1       obs_crop = np.where((spectrum_ang >= aa_start) & (spectrum_ang <= aa_end))
    30   3417.0 MiB      0.0 MiB           1       template_crop = np.where((template_ang >= aa_start) & (template_ang <= aa_end))
    31                                         
    32   3417.0 MiB      0.0 MiB           1       spectrum_ang = spectrum_ang[obs_crop]
    33   3417.0 MiB      0.0 MiB           1       spectrum_flux = spectrum_flux[obs_crop]
    34   3182.1 MiB   -234.9 MiB           1       template_ang = template_ang[template_crop]
    35   2947.1 MiB   -235.0 MiB           1       template_flux = template_flux[template_crop]
    36                                         
    37   2947.1 MiB      0.0 MiB           1       flux_unit = u.Unit('erg s^-1 cm^-2 AA^-1')
    38   2947.1 MiB      0.0 MiB     3000010       unc = [10e-10 for x in range(len(spectrum_flux))]
    39   2947.1 MiB      0.0 MiB     3000013       unc_t = [10e-10 for x in range(len(template_flux))]
    40                                         
    41   2947.1 MiB      0.0 MiB           1       speed_arr = []  # for speed calculate in multiply approach
    42                                         
    43   2947.1 MiB      0.0 MiB           2       template = Spectrum1D(spectral_axis=template_ang*u.AA, 
    44   2947.1 MiB      0.0 MiB           1                             flux=template_flux*flux_unit,
    45   2947.1 MiB      0.0 MiB           1                             uncertainty=StdDevUncertainty(unc_t))
    46   2947.1 MiB      0.0 MiB           2       observed = Spectrum1D(spectral_axis=spectrum_ang*u.AA,
    47   2947.1 MiB      0.0 MiB           1                             flux=spectrum_flux*flux_unit,
    48   2947.1 MiB      0.0 MiB           1                             uncertainty=StdDevUncertainty(unc))
    49   2947.1 MiB     -1.0 MiB           2       corr, lag = correlation.template_correlate(observed, template,
    50   2947.1 MiB      0.0 MiB           1                                                  lag_units=u.one, method="fft")
    51   2946.2 MiB     -1.0 MiB           1       corr = (corr - np.min(corr)) / (np.max(corr) - np.min(corr))  # normalize correlation
    52                                         
    53                                             # autocorrelation part. needs for error estimation
    54   2969.9 MiB     23.7 MiB           2       corr_template, lag_template = correlation.template_correlate(template,
    55   2946.2 MiB      0.0 MiB           1                                                                    template,
    56   2946.2 MiB      0.0 MiB           1                                                                    lag_units=u.one,
    57   2946.2 MiB      0.0 MiB           1                                                                    method="fft")
    58   2969.9 MiB      0.0 MiB           1       corr_template = (corr_template - np.min(corr_template)) / (np.max(corr_template) - np.min(corr_template)) 
    59   2969.9 MiB      0.0 MiB           1       if plot:
    60                                                 plt.plot(lag*299792458, corr)
    61                                                 plt.xlabel("Correlation speed, m/s")
    62                                                 plt.ylabel("Correlation Signal")
    63                                                 plt.show()
    64                                         
    65   2969.9 MiB      0.0 MiB           1       z_peak = lag[np.where(corr==np.max(corr))][0]
    66   2969.9 MiB      0.0 MiB           1       calculate_velocity = z_peak * 299792458
    67   2969.9 MiB      0.0 MiB           1       speed_arr.append(calculate_velocity)
    68   2969.9 MiB      0.0 MiB           1       n = 15 * 1000 # points to the left or right of correlation maximum
    69   2969.9 MiB      0.0 MiB           1       index_peak = np.where(corr == np.amax(corr))[0][0]
    70   2969.9 MiB      0.0 MiB           1       peak_lags = lag[index_peak-n:index_peak+n+1].value
    71   2969.9 MiB      0.0 MiB           1       peak_vals = corr[index_peak-n:index_peak+n+1].value
    72   2969.9 MiB      0.0 MiB           1       p = np.polyfit(peak_lags, peak_vals, deg=2)
    73   2969.9 MiB      0.0 MiB           1       roots = np.roots(p)
    74   2969.9 MiB      0.0 MiB           1       v_fit = np.mean(roots) # maximum lies at mid point between roots
    75   2969.9 MiB      0.0 MiB           1       z = v_fit * 299792458 
    76                                         
    77   2969.9 MiB      0.0 MiB           1       if plot:
    78                                                 plt.scatter(peak_lags * 299792458, peak_vals, label='data')
    79                                                 plt.plot(peak_lags * 299792458, np.polyval(p, peak_lags),
    80                                                          linewidth=0.5, label='fit')
    81                                                 plt.xlabel(lag.unit)
    82                                                 plt.legend()
    83                                                 plt.title('Fit to correlation peak')
    84                                                 plt.show()
    85                                         
    86                                             # Error count part
    87   2969.9 MiB      0.0 MiB           1       sigma_t = np.std(template_flux)
    88   2969.9 MiB      0.0 MiB           1       sigma_g = np.std(spectrum_flux)
    89   2969.9 MiB      0.0 MiB           1       Rt = np.sqrt(np.mean(template_flux**2))
    90   2969.9 MiB      0.0 MiB           1       Rg = np.sqrt(np.mean(spectrum_flux**2))
    91   2969.9 MiB      0.0 MiB           1       sigma =  (1/len(template_flux)) * (sigma_t**2 / Rt**2 + sigma_g**2 / Rg**2) ** 0.5
    92                                             # A is cross-correlation peak intens
    93                                             # THIS PEACE OF SHIT
    94                                             # Calculate velocity error
    95                                             # Moiseev error counting
    96                                             # Optimization correlation peak with gauss function
    97                                             # For this, need to cut-off some lenght of arrray
    98                                             # TO DO: add cuts for multiply peaks fitting.
    99                                             # cut of template-template correlation:
   100   2969.9 MiB      0.0 MiB           1       wings_t = 50 * 1000  # in meters. 
   101   2969.9 MiB      0.0 MiB           1       autocorr_crop = np.where((lag_template*299792458 >= -wings_t) & (lag_template*299792458 <= wings_t))
   102   2969.9 MiB      0.0 MiB           1       corr_template = corr_template[autocorr_crop]
   103   2922.7 MiB    -47.2 MiB           1       lag_template = lag_template[autocorr_crop]
   104                                         
   105   2922.7 MiB      0.0 MiB           1       initial_guess = [max(corr_template), 0, 1, 0.90] # Initial guess for template-template correlation
   106   2922.7 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   107   2922.7 MiB      0.0 MiB           1                                          lag_template*299792458, corr_template,
   108   2922.7 MiB      0.0 MiB           1                                          p0=initial_guess)
   109                                         
   110   2922.7 MiB      0.0 MiB           1       fit_sigma_t = fit_params[2]
   111   2922.7 MiB      0.0 MiB           1       if plot:
   112                                                 plt.plot(lag_template*299792458, gaussian_function(lag_template*299792458,
   113                                                                                                    *fit_params), 'r-', label='fit')
   114                                                 plt.plot(lag_template*299792458, corr_template)
   115                                                 plt.xlabel("Correlation speed, m/s")
   116                                                 plt.ylabel("Correlation Signal")
   117                                                 plt.show()
   118                                         
   119                                         
   120                                             # cut-off observed-template correlation
   121   2922.7 MiB      0.0 MiB           1       corr_crop = np.where((lag*299792458 >= z-wings_t) & (lag*299792458<= z+wings_t))
   122   2922.7 MiB      0.0 MiB           1       corr = corr[corr_crop]
   123   2922.7 MiB      0.0 MiB           1       lag = lag[corr_crop]
   124                                         
   125   2922.7 MiB      0.0 MiB           1       initial_guess = [max(corr), z, 3000, 0.96]
   126   2922.7 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   127   2922.7 MiB      0.0 MiB           1                                          peak_lags*299792458, peak_vals,
   128   2922.7 MiB      0.0 MiB           1                                          p0=initial_guess)
   129   2922.7 MiB      0.0 MiB           1       fit_sigma = fit_params[2]
   130   2922.7 MiB      0.0 MiB           1       if plot:
   131                                                 plt.plot(lag*299792458, gaussian_function(lag*299792458, *fit_params), 'r-', label='fit')
   132                                                 plt.plot(lag*299792458, corr)
   133                                                 plt.xlabel("Correlation speed, m/s")
   134                                                 plt.ylabel("Correlation Signal")
   135                                                 plt.show()
   136   2922.7 MiB      0.0 MiB           1       z_err = abs(sigma**2 - sigma_t**2)
   137   2922.7 MiB      0.0 MiB           1       z_err = z_err**0.5 
   138                                             
   139   2922.7 MiB      0.0 MiB           1       print(f"Direct calculated velocity is: {calculate_velocity} m/s, sigma gauss: {z_err} m/s, sigma: {sigma*299792458} m/s")
   140                                         
   141   2922.7 MiB      0.0 MiB           1       return calculate_velocity, z, z_err, sigma*299792458


SN is 108
Direct calculated velocity is: 23.98332200543526 m/s, sigma gauss: 0.1987752696171579 m/s, sigma: 32.003880858293705 m/s
Filename: /home/lambda/code/synth_spectrum/velocity.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16   2922.7 MiB   2922.7 MiB           1   @profile
    17                                         def find_velocity(spectrum: list, template: list, inter: list, mult: int):
    18   2922.7 MiB      0.0 MiB           1       plot = False
    19   2922.7 MiB      0.0 MiB           1       spectrum_ang = spectrum[0]
    20   2922.7 MiB      0.0 MiB           1       spectrum_flux = spectrum[1]
    21   2922.7 MiB      0.0 MiB           1       template_ang = template[0]
    22   2922.7 MiB      0.0 MiB           1       template_flux = template[1]
    23   3157.7 MiB    235.0 MiB           1       spectrum_ang, spectrum_flux = increese_resolution(spectrum, mult)
    24   3627.6 MiB    470.0 MiB           1       template_ang, template_flux = increese_resolution(template, mult)
    25                                         
    26   3627.6 MiB      0.0 MiB           1       aa_start = inter[0]
    27   3627.6 MiB      0.0 MiB           1       aa_end = inter[1]
    28                                         
    29   3627.6 MiB      0.0 MiB           1       obs_crop = np.where((spectrum_ang >= aa_start) & (spectrum_ang <= aa_end))
    30   3627.6 MiB      0.0 MiB           1       template_crop = np.where((template_ang >= aa_start) & (template_ang <= aa_end))
    31                                         
    32   3627.6 MiB      0.0 MiB           1       spectrum_ang = spectrum_ang[obs_crop]
    33   3392.8 MiB   -234.9 MiB           1       spectrum_flux = spectrum_flux[obs_crop]
    34   3157.8 MiB   -235.0 MiB           1       template_ang = template_ang[template_crop]
    35   2922.8 MiB   -235.0 MiB           1       template_flux = template_flux[template_crop]
    36                                         
    37   2922.8 MiB      0.0 MiB           1       flux_unit = u.Unit('erg s^-1 cm^-2 AA^-1')
    38   2922.8 MiB      0.0 MiB     3000010       unc = [10e-10 for x in range(len(spectrum_flux))]
    39   2922.8 MiB      0.0 MiB     3000013       unc_t = [10e-10 for x in range(len(template_flux))]
    40                                         
    41   2922.8 MiB      0.0 MiB           1       speed_arr = []  # for speed calculate in multiply approach
    42                                         
    43   2922.8 MiB      0.0 MiB           2       template = Spectrum1D(spectral_axis=template_ang*u.AA, 
    44   2922.8 MiB      0.0 MiB           1                             flux=template_flux*flux_unit,
    45   2922.8 MiB      0.0 MiB           1                             uncertainty=StdDevUncertainty(unc_t))
    46   2922.8 MiB      0.0 MiB           2       observed = Spectrum1D(spectral_axis=spectrum_ang*u.AA,
    47   2922.8 MiB      0.0 MiB           1                             flux=spectrum_flux*flux_unit,
    48   2922.8 MiB      0.0 MiB           1                             uncertainty=StdDevUncertainty(unc))
    49   2970.0 MiB     47.2 MiB           2       corr, lag = correlation.template_correlate(observed, template,
    50   2922.8 MiB      0.0 MiB           1                                                  lag_units=u.one, method="fft")
    51   2970.0 MiB      0.0 MiB           1       corr = (corr - np.min(corr)) / (np.max(corr) - np.min(corr))  # normalize correlation
    52                                         
    53                                             # autocorrelation part. needs for error estimation
    54   3112.1 MiB    142.1 MiB           2       corr_template, lag_template = correlation.template_correlate(template,
    55   2970.0 MiB      0.0 MiB           1                                                                    template,
    56   2970.0 MiB      0.0 MiB           1                                                                    lag_units=u.one,
    57   2970.0 MiB      0.0 MiB           1                                                                    method="fft")
    58   3065.0 MiB    -47.1 MiB           1       corr_template = (corr_template - np.min(corr_template)) / (np.max(corr_template) - np.min(corr_template)) 
    59   3065.0 MiB      0.0 MiB           1       if plot:
    60                                                 plt.plot(lag*299792458, corr)
    61                                                 plt.xlabel("Correlation speed, m/s")
    62                                                 plt.ylabel("Correlation Signal")
    63                                                 plt.show()
    64                                         
    65   3065.0 MiB      0.0 MiB           1       z_peak = lag[np.where(corr==np.max(corr))][0]
    66   3065.0 MiB      0.0 MiB           1       calculate_velocity = z_peak * 299792458
    67   3065.0 MiB      0.0 MiB           1       speed_arr.append(calculate_velocity)
    68   3065.0 MiB      0.0 MiB           1       n = 15 * 1000 # points to the left or right of correlation maximum
    69   3065.0 MiB      0.0 MiB           1       index_peak = np.where(corr == np.amax(corr))[0][0]
    70   3065.0 MiB      0.0 MiB           1       peak_lags = lag[index_peak-n:index_peak+n+1].value
    71   3065.0 MiB      0.0 MiB           1       peak_vals = corr[index_peak-n:index_peak+n+1].value
    72   3065.0 MiB      0.0 MiB           1       p = np.polyfit(peak_lags, peak_vals, deg=2)
    73   3065.0 MiB      0.0 MiB           1       roots = np.roots(p)
    74   3065.0 MiB      0.0 MiB           1       v_fit = np.mean(roots) # maximum lies at mid point between roots
    75   3065.0 MiB      0.0 MiB           1       z = v_fit * 299792458 
    76                                         
    77   3065.0 MiB      0.0 MiB           1       if plot:
    78                                                 plt.scatter(peak_lags * 299792458, peak_vals, label='data')
    79                                                 plt.plot(peak_lags * 299792458, np.polyval(p, peak_lags),
    80                                                          linewidth=0.5, label='fit')
    81                                                 plt.xlabel(lag.unit)
    82                                                 plt.legend()
    83                                                 plt.title('Fit to correlation peak')
    84                                                 plt.show()
    85                                         
    86                                             # Error count part
    87   3065.0 MiB      0.0 MiB           1       sigma_t = np.std(template_flux)
    88   3065.0 MiB      0.0 MiB           1       sigma_g = np.std(spectrum_flux)
    89   3065.0 MiB      0.0 MiB           1       Rt = np.sqrt(np.mean(template_flux**2))
    90   3065.0 MiB      0.0 MiB           1       Rg = np.sqrt(np.mean(spectrum_flux**2))
    91   3065.0 MiB      0.0 MiB           1       sigma =  (1/len(template_flux)) * (sigma_t**2 / Rt**2 + sigma_g**2 / Rg**2) ** 0.5
    92                                             # A is cross-correlation peak intens
    93                                             # THIS PEACE OF SHIT
    94                                             # Calculate velocity error
    95                                             # Moiseev error counting
    96                                             # Optimization correlation peak with gauss function
    97                                             # For this, need to cut-off some lenght of arrray
    98                                             # TO DO: add cuts for multiply peaks fitting.
    99                                             # cut of template-template correlation:
   100   3065.0 MiB      0.0 MiB           1       wings_t = 50 * 1000  # in meters. 
   101   3065.0 MiB      0.0 MiB           1       autocorr_crop = np.where((lag_template*299792458 >= -wings_t) & (lag_template*299792458 <= wings_t))
   102   3065.0 MiB      0.0 MiB           1       corr_template = corr_template[autocorr_crop]
   103   3017.8 MiB    -47.2 MiB           1       lag_template = lag_template[autocorr_crop]
   104                                         
   105   3017.8 MiB      0.0 MiB           1       initial_guess = [max(corr_template), 0, 1, 0.90] # Initial guess for template-template correlation
   106   3017.8 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   107   3017.8 MiB      0.0 MiB           1                                          lag_template*299792458, corr_template,
   108   3017.8 MiB      0.0 MiB           1                                          p0=initial_guess)
   109                                         
   110   3017.8 MiB      0.0 MiB           1       fit_sigma_t = fit_params[2]
   111   3017.8 MiB      0.0 MiB           1       if plot:
   112                                                 plt.plot(lag_template*299792458, gaussian_function(lag_template*299792458,
   113                                                                                                    *fit_params), 'r-', label='fit')
   114                                                 plt.plot(lag_template*299792458, corr_template)
   115                                                 plt.xlabel("Correlation speed, m/s")
   116                                                 plt.ylabel("Correlation Signal")
   117                                                 plt.show()
   118                                         
   119                                         
   120                                             # cut-off observed-template correlation
   121   3017.8 MiB      0.0 MiB           1       corr_crop = np.where((lag*299792458 >= z-wings_t) & (lag*299792458<= z+wings_t))
   122   3017.8 MiB      0.0 MiB           1       corr = corr[corr_crop]
   123   3017.8 MiB      0.0 MiB           1       lag = lag[corr_crop]
   124                                         
   125   3017.8 MiB      0.0 MiB           1       initial_guess = [max(corr), z, 3000, 0.96]
   126   3017.8 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   127   3017.8 MiB      0.0 MiB           1                                          peak_lags*299792458, peak_vals,
   128   3017.8 MiB      0.0 MiB           1                                          p0=initial_guess)
   129   3017.8 MiB      0.0 MiB           1       fit_sigma = fit_params[2]
   130   3017.8 MiB      0.0 MiB           1       if plot:
   131                                                 plt.plot(lag*299792458, gaussian_function(lag*299792458, *fit_params), 'r-', label='fit')
   132                                                 plt.plot(lag*299792458, corr)
   133                                                 plt.xlabel("Correlation speed, m/s")
   134                                                 plt.ylabel("Correlation Signal")
   135                                                 plt.show()
   136   3017.8 MiB      0.0 MiB           1       z_err = abs(sigma**2 - sigma_t**2)
   137   3017.8 MiB      0.0 MiB           1       z_err = z_err**0.5 
   138                                             
   139   3017.8 MiB      0.0 MiB           1       print(f"Direct calculated velocity is: {calculate_velocity} m/s, sigma gauss: {z_err} m/s, sigma: {sigma*299792458} m/s")
   140                                         
   141   3017.8 MiB      0.0 MiB           1       return calculate_velocity, z, z_err, sigma*299792458


SN is 109
Direct calculated velocity is: 11.991660769732086 m/s, sigma gauss: 0.1987752696171579 m/s, sigma: 31.999854797412237 m/s
Filename: /home/lambda/code/synth_spectrum/velocity.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    16   2970.6 MiB   2970.6 MiB           1   @profile
    17                                         def find_velocity(spectrum: list, template: list, inter: list, mult: int):
    18   2970.6 MiB      0.0 MiB           1       plot = False
    19   2970.6 MiB      0.0 MiB           1       spectrum_ang = spectrum[0]
    20   2970.6 MiB      0.0 MiB           1       spectrum_flux = spectrum[1]
    21   2970.6 MiB      0.0 MiB           1       template_ang = template[0]
    22   2970.6 MiB      0.0 MiB           1       template_flux = template[1]
    23   3440.5 MiB    469.9 MiB           1       spectrum_ang, spectrum_flux = increese_resolution(spectrum, mult)
    24   3910.5 MiB    470.1 MiB           1       template_ang, template_flux = increese_resolution(template, mult)
    25                                         
    26   3910.5 MiB      0.0 MiB           1       aa_start = inter[0]
    27   3910.5 MiB      0.0 MiB           1       aa_end = inter[1]
    28                                         
    29   3910.5 MiB      0.0 MiB           1       obs_crop = np.where((spectrum_ang >= aa_start) & (spectrum_ang <= aa_end))
    30   3910.5 MiB      0.0 MiB           1       template_crop = np.where((template_ang >= aa_start) & (template_ang <= aa_end))
    31                                         
    32   3675.6 MiB   -235.0 MiB           1       spectrum_ang = spectrum_ang[obs_crop]
    33   3440.6 MiB   -235.0 MiB           1       spectrum_flux = spectrum_flux[obs_crop]
    34   3205.6 MiB   -235.0 MiB           1       template_ang = template_ang[template_crop]
    35   2970.6 MiB   -235.0 MiB           1       template_flux = template_flux[template_crop]
    36                                         
    37   2970.6 MiB      0.0 MiB           1       flux_unit = u.Unit('erg s^-1 cm^-2 AA^-1')
    38   2970.6 MiB      0.0 MiB     3000010       unc = [10e-10 for x in range(len(spectrum_flux))]
    39   2970.6 MiB      0.0 MiB     3000013       unc_t = [10e-10 for x in range(len(template_flux))]
    40                                         
    41   2970.6 MiB      0.0 MiB           1       speed_arr = []  # for speed calculate in multiply approach
    42                                         
    43   2970.6 MiB      0.0 MiB           2       template = Spectrum1D(spectral_axis=template_ang*u.AA, 
    44   2970.6 MiB      0.0 MiB           1                             flux=template_flux*flux_unit,
    45   2970.6 MiB      0.0 MiB           1                             uncertainty=StdDevUncertainty(unc_t))
    46   2970.6 MiB      0.0 MiB           2       observed = Spectrum1D(spectral_axis=spectrum_ang*u.AA,
    47   2970.6 MiB      0.0 MiB           1                             flux=spectrum_flux*flux_unit,
    48   2970.6 MiB      0.0 MiB           1                             uncertainty=StdDevUncertainty(unc))
    49   2970.6 MiB    -47.7 MiB           2       corr, lag = correlation.template_correlate(observed, template,
    50   2970.6 MiB      0.0 MiB           1                                                  lag_units=u.one, method="fft")
    51   2922.9 MiB    -47.7 MiB           1       corr = (corr - np.min(corr)) / (np.max(corr) - np.min(corr))  # normalize correlation
    52                                         
    53                                             # autocorrelation part. needs for error estimation
    54   2922.9 MiB     -0.1 MiB           2       corr_template, lag_template = correlation.template_correlate(template,
    55   2922.9 MiB      0.0 MiB           1                                                                    template,
    56   2922.9 MiB      0.0 MiB           1                                                                    lag_units=u.one,
    57   2922.9 MiB      0.0 MiB           1                                                                    method="fft")
    58   2922.8 MiB     -0.1 MiB           1       corr_template = (corr_template - np.min(corr_template)) / (np.max(corr_template) - np.min(corr_template)) 
    59   2922.8 MiB      0.0 MiB           1       if plot:
    60                                                 plt.plot(lag*299792458, corr)
    61                                                 plt.xlabel("Correlation speed, m/s")
    62                                                 plt.ylabel("Correlation Signal")
    63                                                 plt.show()
    64                                         
    65   2922.8 MiB      0.0 MiB           1       z_peak = lag[np.where(corr==np.max(corr))][0]
    66   2922.8 MiB      0.0 MiB           1       calculate_velocity = z_peak * 299792458
    67   2922.8 MiB      0.0 MiB           1       speed_arr.append(calculate_velocity)
    68   2922.8 MiB      0.0 MiB           1       n = 15 * 1000 # points to the left or right of correlation maximum
    69   2922.8 MiB      0.0 MiB           1       index_peak = np.where(corr == np.amax(corr))[0][0]
    70   2922.8 MiB      0.0 MiB           1       peak_lags = lag[index_peak-n:index_peak+n+1].value
    71   2922.8 MiB      0.0 MiB           1       peak_vals = corr[index_peak-n:index_peak+n+1].value
    72   2922.8 MiB      0.0 MiB           1       p = np.polyfit(peak_lags, peak_vals, deg=2)
    73   2922.8 MiB      0.0 MiB           1       roots = np.roots(p)
    74   2922.8 MiB      0.0 MiB           1       v_fit = np.mean(roots) # maximum lies at mid point between roots
    75   2922.8 MiB      0.0 MiB           1       z = v_fit * 299792458 
    76                                         
    77   2922.8 MiB      0.0 MiB           1       if plot:
    78                                                 plt.scatter(peak_lags * 299792458, peak_vals, label='data')
    79                                                 plt.plot(peak_lags * 299792458, np.polyval(p, peak_lags),
    80                                                          linewidth=0.5, label='fit')
    81                                                 plt.xlabel(lag.unit)
    82                                                 plt.legend()
    83                                                 plt.title('Fit to correlation peak')
    84                                                 plt.show()
    85                                         
    86                                             # Error count part
    87   2922.8 MiB      0.0 MiB           1       sigma_t = np.std(template_flux)
    88   2922.8 MiB      0.0 MiB           1       sigma_g = np.std(spectrum_flux)
    89   2922.8 MiB      0.0 MiB           1       Rt = np.sqrt(np.mean(template_flux**2))
    90   2922.8 MiB      0.0 MiB           1       Rg = np.sqrt(np.mean(spectrum_flux**2))
    91   2922.8 MiB      0.0 MiB           1       sigma =  (1/len(template_flux)) * (sigma_t**2 / Rt**2 + sigma_g**2 / Rg**2) ** 0.5
    92                                             # A is cross-correlation peak intens
    93                                             # THIS PEACE OF SHIT
    94                                             # Calculate velocity error
    95                                             # Moiseev error counting
    96                                             # Optimization correlation peak with gauss function
    97                                             # For this, need to cut-off some lenght of arrray
    98                                             # TO DO: add cuts for multiply peaks fitting.
    99                                             # cut of template-template correlation:
   100   2922.8 MiB      0.0 MiB           1       wings_t = 50 * 1000  # in meters. 
   101   2922.8 MiB      0.0 MiB           1       autocorr_crop = np.where((lag_template*299792458 >= -wings_t) & (lag_template*299792458 <= wings_t))
   102   2922.8 MiB      0.0 MiB           1       corr_template = corr_template[autocorr_crop]
   103   2922.8 MiB      0.0 MiB           1       lag_template = lag_template[autocorr_crop]
   104                                         
   105   2922.8 MiB      0.0 MiB           1       initial_guess = [max(corr_template), 0, 1, 0.90] # Initial guess for template-template correlation
   106   2922.8 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   107   2922.8 MiB      0.0 MiB           1                                          lag_template*299792458, corr_template,
   108   2922.8 MiB      0.0 MiB           1                                          p0=initial_guess)
   109                                         
   110   2922.8 MiB      0.0 MiB           1       fit_sigma_t = fit_params[2]
   111   2922.8 MiB      0.0 MiB           1       if plot:
   112                                                 plt.plot(lag_template*299792458, gaussian_function(lag_template*299792458,
   113                                                                                                    *fit_params), 'r-', label='fit')
   114                                                 plt.plot(lag_template*299792458, corr_template)
   115                                                 plt.xlabel("Correlation speed, m/s")
   116                                                 plt.ylabel("Correlation Signal")
   117                                                 plt.show()
   118                                         
   119                                         
   120                                             # cut-off observed-template correlation
   121   2922.8 MiB      0.0 MiB           1       corr_crop = np.where((lag*299792458 >= z-wings_t) & (lag*299792458<= z+wings_t))
   122   2922.8 MiB      0.0 MiB           1       corr = corr[corr_crop]
   123   2922.8 MiB      0.0 MiB           1       lag = lag[corr_crop]
   124                                         
   125   2922.8 MiB      0.0 MiB           1       initial_guess = [max(corr), z, 3000, 0.96]
   126   2922.8 MiB      0.0 MiB           2       fit_params, covariance = curve_fit(gaussian_function, 
   127   2922.8 MiB      0.0 MiB           1                                          peak_lags*299792458, peak_vals,
   128   2922.8 MiB      0.0 MiB           1                                          p0=initial_guess)
   129   2922.8 MiB      0.0 MiB           1       fit_sigma = fit_params[2]
   130   2922.8 MiB      0.0 MiB           1       if plot:
   131                                                 plt.plot(lag*299792458, gaussian_function(lag*299792458, *fit_params), 'r-', label='fit')
   132                                                 plt.plot(lag*299792458, corr)
   133                                                 plt.xlabel("Correlation speed, m/s")
   134                                                 plt.ylabel("Correlation Signal")
   135                                                 plt.show()
   136   2922.8 MiB      0.0 MiB           1       z_err = abs(sigma**2 - sigma_t**2)
   137   2922.8 MiB      0.0 MiB           1       z_err = z_err**0.5 
   138                                             
   139   2922.8 MiB      0.0 MiB           1       print(f"Direct calculated velocity is: {calculate_velocity} m/s, sigma gauss: {z_err} m/s, sigma: {sigma*299792458} m/s")
   140                                         
   141   2922.8 MiB      0.0 MiB           1       return calculate_velocity, z, z_err, sigma*299792458


Filename: SN_demo.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
     9    230.4 MiB    230.4 MiB           1   @profile
    10                                         def make_good():
    11                                         # s2 = extract_data("data/NES_model_110000.rgs", text=True)
    12    256.2 MiB     25.8 MiB           1       s3 = extract_data("data/NES_model_60000.rgs", text=True)
    13                                         # s4 = extract_data("data/NES_model_40000.rgs", text=True)
    14                                         #s5 = extract_data("data/NES_model_15000.rgs", text=True)
    15    278.9 MiB     22.7 MiB           1       a_template, f_template = extract_data("data/NES_model_110000.rgs", text=True)
    16                                         
    17                                         # spectrum_arr = [s3, s3, s3, s3, s3, s3, s3, s3, s3, s3]
    18                                         # spectrum_arr = [s5, s5, s5, s5, s5, s5, s5, s5, s5, s5]
    19    278.9 MiB      0.0 MiB           1       spectrum_arr = [s3]
    20                                         # spectrum_arr = [[a_template, f_template]]
    21    278.9 MiB      0.0 MiB           1       spectrum_names = ["R=60000 inter", "R=15000 inter"]
    22    278.9 MiB      0.0 MiB           1       spectrum_names_direct = ["R=60000", "R=60000", "R=60000", "R=60000", "R=60000","R=60000","R=60000","R=60000","R=60000","R=60000"]
    23                                         # spectrum_names_direct = ["R=15000", "R=15000", "R=15000", "R=15000", "R=15000","R=15000","R=15000","R=15000","R=15000","R=15000"]
    24                                         
    25    278.9 MiB      0.0 MiB           1       total_velocity_data = []
    26    278.9 MiB      0.0 MiB           1       total_delta = []
    27    278.9 MiB      0.0 MiB           1       total_delta_inter = []
    28    278.9 MiB      0.0 MiB           1       total_velocity_err = []
    29                                         
    30    278.9 MiB      0.0 MiB           1       v = 20 # in meters
    31    278.9 MiB      0.0 MiB           1       dots = 100
    32    278.9 MiB      0.0 MiB           1       plot = False
    33                                         
    34   2922.8 MiB      0.0 MiB           2       for i in range(len(spectrum_arr)):
    35    278.9 MiB      0.0 MiB           1           velocity = []
    36    278.9 MiB      0.0 MiB           1           z_velocity = []
    37    278.9 MiB      0.0 MiB           1           SN = []
    38    278.9 MiB      0.0 MiB           1           delta = []
    39    278.9 MiB      0.0 MiB           1           delta_inter = []
    40    278.9 MiB      0.0 MiB           1           z_err_arr = []
    41                                                 # Now, make a variance between arrays -- add some noise
    42                                                 # from SN 1 to 100
    43   3065.2 MiB   -781.1 MiB          11           for j in range(100, 110, 1):
    44   3065.2 MiB   -638.6 MiB          10               print(f"SN is {j}")
    45   3065.2 MiB   -638.6 MiB          10               ang = np.copy(spectrum_arr[i][0])
    46   3065.2 MiB   -638.5 MiB          10               flux = np.copy(spectrum_arr[i][1])
    47   3065.2 MiB   -627.2 MiB          10               _, ang = pyasl.dopplerShift(ang, flux, v / 1000, edgeHandling="firstlast")
    48   3065.2 MiB   -638.6 MiB          10               noise_spectrum = np.copy(flux)
    49   3065.2 MiB   -638.5 MiB          10               noise = np.random.normal(loc=0, scale=1/j, size=len(flux))
    50   3065.2 MiB   -638.6 MiB          10               noise_spectrum = noise_spectrum + noise
    51   3065.2 MiB   1355.0 MiB          20               cv, z, z_err, s = find_velocity([ang, noise_spectrum], 
    52   3065.2 MiB   -638.6 MiB          10                                               [a_template, f_template],
    53   3065.2 MiB   -638.6 MiB          10                                               [4700, 5000], dots)
    54   3065.2 MiB   -781.1 MiB          10               velocity.append(cv)
    55   3065.2 MiB   -781.1 MiB          10               z_velocity.append(z)
    56   3065.2 MiB   -781.1 MiB          10               SN.append(j)
    57   3065.2 MiB   -781.1 MiB          10               delta_inter.append(v - z)  # For delta graph
    58   3065.2 MiB   -781.1 MiB          10               delta.append(v - cv)
    59   3065.2 MiB   -781.1 MiB          10               z_err_arr.append(s)
    60                                         
    61   3065.2 MiB   -781.1 MiB          10               del noise_spectrum
    62   3065.2 MiB   -781.1 MiB          10               del ang
    63   3065.2 MiB   -781.1 MiB          10               del flux
    64                                         
    65   2922.8 MiB   -142.5 MiB           1           velocity_data = [velocity, z_velocity]
    66   2922.8 MiB      0.0 MiB           1           total_velocity_data.append(velocity_data)
    67   2922.8 MiB      0.0 MiB           1           total_delta_inter.append(delta_inter)
    68   2922.8 MiB      0.0 MiB           1           total_delta.append(delta)
    69   2922.8 MiB      0.0 MiB           1           total_velocity_err.append(z_err_arr)
    70                                                 
    71                                         
    72                                         # A very bad part. btw -- it's time to get it done
    73   2922.8 MiB      0.0 MiB           1       from matplotlib.ticker import MultipleLocator
    74   2922.8 MiB      0.0 MiB           1       import matplotlib.font_manager as fm
    75   2922.8 MiB      0.0 MiB           2       gs_font = fm.FontProperties(
    76   2922.8 MiB      0.0 MiB           1                       fname='/System/Library/Fonts/Supplemental/GillSans.ttc')
    77                                         
    78   2922.8 MiB      0.0 MiB           1       plt.style.use('./old-style.mplstyle')
    79                                         # plt.grid()
    80   2922.8 MiB      0.0 MiB           1       WIDTH, HEIGHT, DPI = 700, 500, 100
    81   2959.6 MiB     36.8 MiB           1       fig, ax = plt.subplots(figsize=(WIDTH/DPI, HEIGHT/DPI), dpi=DPI)
    82   2959.6 MiB      0.0 MiB           1       linestyle = ['solid', "dashed", 'dotted', 'dashdot', 'solid', 'dashed','dotted', 'dashdot', 'solid', 'dashed']
    83                                         
    84   2959.6 MiB      0.0 MiB           2       for i in range(len(spectrum_arr)):
    85   2959.6 MiB      0.0 MiB           1           ax.errorbar(SN, total_delta[i], total_velocity_err[i], color="k", linestyle=linestyle[i], label=spectrum_names_direct[i])
    86                                         
    87   2959.6 MiB      0.0 MiB           1       if plot:
    88                                                 plt.title(f"Delta graph for {v} m/s")
    89                                                 plt.xlabel("S/N", fontsize=14)
    90                                                 plt.ylabel("Delta", fontsize=14)
    91                                                 plt.legend()
    92                                                 plt.show()


